// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rill/runtime/v1/queries.proto

package runtimev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/rilldata/rill/proto/gen/rill/runtime/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// QueryServiceName is the fully-qualified name of the QueryService service.
	QueryServiceName = "rill.runtime.v1.QueryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QueryServiceQueryProcedure is the fully-qualified name of the QueryService's Query RPC.
	QueryServiceQueryProcedure = "/rill.runtime.v1.QueryService/Query"
	// QueryServiceExportProcedure is the fully-qualified name of the QueryService's Export RPC.
	QueryServiceExportProcedure = "/rill.runtime.v1.QueryService/Export"
	// QueryServiceMetricsViewToplistProcedure is the fully-qualified name of the QueryService's
	// MetricsViewToplist RPC.
	QueryServiceMetricsViewToplistProcedure = "/rill.runtime.v1.QueryService/MetricsViewToplist"
	// QueryServiceMetricsViewComparisonToplistProcedure is the fully-qualified name of the
	// QueryService's MetricsViewComparisonToplist RPC.
	QueryServiceMetricsViewComparisonToplistProcedure = "/rill.runtime.v1.QueryService/MetricsViewComparisonToplist"
	// QueryServiceMetricsViewTimeSeriesProcedure is the fully-qualified name of the QueryService's
	// MetricsViewTimeSeries RPC.
	QueryServiceMetricsViewTimeSeriesProcedure = "/rill.runtime.v1.QueryService/MetricsViewTimeSeries"
	// QueryServiceMetricsViewTotalsProcedure is the fully-qualified name of the QueryService's
	// MetricsViewTotals RPC.
	QueryServiceMetricsViewTotalsProcedure = "/rill.runtime.v1.QueryService/MetricsViewTotals"
	// QueryServiceMetricsViewRowsProcedure is the fully-qualified name of the QueryService's
	// MetricsViewRows RPC.
	QueryServiceMetricsViewRowsProcedure = "/rill.runtime.v1.QueryService/MetricsViewRows"
	// QueryServiceMetricsViewTimeRangeProcedure is the fully-qualified name of the QueryService's
	// MetricsViewTimeRange RPC.
	QueryServiceMetricsViewTimeRangeProcedure = "/rill.runtime.v1.QueryService/MetricsViewTimeRange"
	// QueryServiceColumnRollupIntervalProcedure is the fully-qualified name of the QueryService's
	// ColumnRollupInterval RPC.
	QueryServiceColumnRollupIntervalProcedure = "/rill.runtime.v1.QueryService/ColumnRollupInterval"
	// QueryServiceColumnTopKProcedure is the fully-qualified name of the QueryService's ColumnTopK RPC.
	QueryServiceColumnTopKProcedure = "/rill.runtime.v1.QueryService/ColumnTopK"
	// QueryServiceColumnNullCountProcedure is the fully-qualified name of the QueryService's
	// ColumnNullCount RPC.
	QueryServiceColumnNullCountProcedure = "/rill.runtime.v1.QueryService/ColumnNullCount"
	// QueryServiceColumnDescriptiveStatisticsProcedure is the fully-qualified name of the
	// QueryService's ColumnDescriptiveStatistics RPC.
	QueryServiceColumnDescriptiveStatisticsProcedure = "/rill.runtime.v1.QueryService/ColumnDescriptiveStatistics"
	// QueryServiceColumnTimeGrainProcedure is the fully-qualified name of the QueryService's
	// ColumnTimeGrain RPC.
	QueryServiceColumnTimeGrainProcedure = "/rill.runtime.v1.QueryService/ColumnTimeGrain"
	// QueryServiceColumnNumericHistogramProcedure is the fully-qualified name of the QueryService's
	// ColumnNumericHistogram RPC.
	QueryServiceColumnNumericHistogramProcedure = "/rill.runtime.v1.QueryService/ColumnNumericHistogram"
	// QueryServiceColumnRugHistogramProcedure is the fully-qualified name of the QueryService's
	// ColumnRugHistogram RPC.
	QueryServiceColumnRugHistogramProcedure = "/rill.runtime.v1.QueryService/ColumnRugHistogram"
	// QueryServiceColumnTimeRangeProcedure is the fully-qualified name of the QueryService's
	// ColumnTimeRange RPC.
	QueryServiceColumnTimeRangeProcedure = "/rill.runtime.v1.QueryService/ColumnTimeRange"
	// QueryServiceColumnCardinalityProcedure is the fully-qualified name of the QueryService's
	// ColumnCardinality RPC.
	QueryServiceColumnCardinalityProcedure = "/rill.runtime.v1.QueryService/ColumnCardinality"
	// QueryServiceColumnTimeSeriesProcedure is the fully-qualified name of the QueryService's
	// ColumnTimeSeries RPC.
	QueryServiceColumnTimeSeriesProcedure = "/rill.runtime.v1.QueryService/ColumnTimeSeries"
	// QueryServiceTableCardinalityProcedure is the fully-qualified name of the QueryService's
	// TableCardinality RPC.
	QueryServiceTableCardinalityProcedure = "/rill.runtime.v1.QueryService/TableCardinality"
	// QueryServiceTableColumnsProcedure is the fully-qualified name of the QueryService's TableColumns
	// RPC.
	QueryServiceTableColumnsProcedure = "/rill.runtime.v1.QueryService/TableColumns"
	// QueryServiceTableRowsProcedure is the fully-qualified name of the QueryService's TableRows RPC.
	QueryServiceTableRowsProcedure = "/rill.runtime.v1.QueryService/TableRows"
	// QueryServiceQueryBatchProcedure is the fully-qualified name of the QueryService's QueryBatch RPC.
	QueryServiceQueryBatchProcedure = "/rill.runtime.v1.QueryService/QueryBatch"
)

// QueryServiceClient is a client for the rill.runtime.v1.QueryService service.
type QueryServiceClient interface {
	// Query runs a SQL query against the instance's OLAP datastore.
	Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error)
	// Export builds a URL to download the results of a query as a file.
	Export(context.Context, *connect_go.Request[v1.ExportRequest]) (*connect_go.Response[v1.ExportResponse], error)
	// MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
	// It's a convenience API for querying a metrics view.
	MetricsViewToplist(context.Context, *connect_go.Request[v1.MetricsViewToplistRequest]) (*connect_go.Response[v1.MetricsViewToplistResponse], error)
	MetricsViewComparisonToplist(context.Context, *connect_go.Request[v1.MetricsViewComparisonToplistRequest]) (*connect_go.Response[v1.MetricsViewComparisonToplistResponse], error)
	// MetricsViewTimeSeries returns time series for the measures in the metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTimeSeries(context.Context, *connect_go.Request[v1.MetricsViewTimeSeriesRequest]) (*connect_go.Response[v1.MetricsViewTimeSeriesResponse], error)
	// MetricsViewTotals returns totals over a time period for the measures in a metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTotals(context.Context, *connect_go.Request[v1.MetricsViewTotalsRequest]) (*connect_go.Response[v1.MetricsViewTotalsResponse], error)
	// MetricsViewRows returns the underlying model rows matching a metrics view time range and filter(s).
	MetricsViewRows(context.Context, *connect_go.Request[v1.MetricsViewRowsRequest]) (*connect_go.Response[v1.MetricsViewRowsResponse], error)
	// MetricsViewTimeRange Get the time range summaries (min, max) for time column in a metrics view
	MetricsViewTimeRange(context.Context, *connect_go.Request[v1.MetricsViewTimeRangeRequest]) (*connect_go.Response[v1.MetricsViewTimeRangeResponse], error)
	// ColumnRollupInterval returns the minimum time granularity (as well as the time range) for a specified timestamp column
	ColumnRollupInterval(context.Context, *connect_go.Request[v1.ColumnRollupIntervalRequest]) (*connect_go.Response[v1.ColumnRollupIntervalResponse], error)
	// Get TopK elements from a table for a column given an agg function
	// agg function and k are optional, defaults are count(*) and 50 respectively
	ColumnTopK(context.Context, *connect_go.Request[v1.ColumnTopKRequest]) (*connect_go.Response[v1.ColumnTopKResponse], error)
	// Get the number of nulls in a column
	ColumnNullCount(context.Context, *connect_go.Request[v1.ColumnNullCountRequest]) (*connect_go.Response[v1.ColumnNullCountResponse], error)
	// Get basic stats for a numeric column like min, max, mean, stddev, etc
	ColumnDescriptiveStatistics(context.Context, *connect_go.Request[v1.ColumnDescriptiveStatisticsRequest]) (*connect_go.Response[v1.ColumnDescriptiveStatisticsResponse], error)
	// Estimates the smallest time grain present in the column
	ColumnTimeGrain(context.Context, *connect_go.Request[v1.ColumnTimeGrainRequest]) (*connect_go.Response[v1.ColumnTimeGrainResponse], error)
	// Get the histogram for values in a column
	ColumnNumericHistogram(context.Context, *connect_go.Request[v1.ColumnNumericHistogramRequest]) (*connect_go.Response[v1.ColumnNumericHistogramResponse], error)
	// Get outliers for a numeric column
	ColumnRugHistogram(context.Context, *connect_go.Request[v1.ColumnRugHistogramRequest]) (*connect_go.Response[v1.ColumnRugHistogramResponse], error)
	// Get the time range summaries (min, max) for a column
	ColumnTimeRange(context.Context, *connect_go.Request[v1.ColumnTimeRangeRequest]) (*connect_go.Response[v1.ColumnTimeRangeResponse], error)
	// Get cardinality for a column
	ColumnCardinality(context.Context, *connect_go.Request[v1.ColumnCardinalityRequest]) (*connect_go.Response[v1.ColumnCardinalityResponse], error)
	// Generate time series for the given measures (aggregation expressions) along with the sparkline timeseries
	ColumnTimeSeries(context.Context, *connect_go.Request[v1.ColumnTimeSeriesRequest]) (*connect_go.Response[v1.ColumnTimeSeriesResponse], error)
	// TableCardinality returns row count
	TableCardinality(context.Context, *connect_go.Request[v1.TableCardinalityRequest]) (*connect_go.Response[v1.TableCardinalityResponse], error)
	// TableColumns returns column profiles
	TableColumns(context.Context, *connect_go.Request[v1.TableColumnsRequest]) (*connect_go.Response[v1.TableColumnsResponse], error)
	// TableRows returns table rows
	TableRows(context.Context, *connect_go.Request[v1.TableRowsRequest]) (*connect_go.Response[v1.TableRowsResponse], error)
	// Batch request with different queries
	QueryBatch(context.Context, *connect_go.Request[v1.QueryBatchRequest]) (*connect_go.ServerStreamForClient[v1.QueryBatchResponse], error)
}

// NewQueryServiceClient constructs a client for the rill.runtime.v1.QueryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) QueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &queryServiceClient{
		query: connect_go.NewClient[v1.QueryRequest, v1.QueryResponse](
			httpClient,
			baseURL+QueryServiceQueryProcedure,
			opts...,
		),
		export: connect_go.NewClient[v1.ExportRequest, v1.ExportResponse](
			httpClient,
			baseURL+QueryServiceExportProcedure,
			opts...,
		),
		metricsViewToplist: connect_go.NewClient[v1.MetricsViewToplistRequest, v1.MetricsViewToplistResponse](
			httpClient,
			baseURL+QueryServiceMetricsViewToplistProcedure,
			opts...,
		),
		metricsViewComparisonToplist: connect_go.NewClient[v1.MetricsViewComparisonToplistRequest, v1.MetricsViewComparisonToplistResponse](
			httpClient,
			baseURL+QueryServiceMetricsViewComparisonToplistProcedure,
			opts...,
		),
		metricsViewTimeSeries: connect_go.NewClient[v1.MetricsViewTimeSeriesRequest, v1.MetricsViewTimeSeriesResponse](
			httpClient,
			baseURL+QueryServiceMetricsViewTimeSeriesProcedure,
			opts...,
		),
		metricsViewTotals: connect_go.NewClient[v1.MetricsViewTotalsRequest, v1.MetricsViewTotalsResponse](
			httpClient,
			baseURL+QueryServiceMetricsViewTotalsProcedure,
			opts...,
		),
		metricsViewRows: connect_go.NewClient[v1.MetricsViewRowsRequest, v1.MetricsViewRowsResponse](
			httpClient,
			baseURL+QueryServiceMetricsViewRowsProcedure,
			opts...,
		),
		metricsViewTimeRange: connect_go.NewClient[v1.MetricsViewTimeRangeRequest, v1.MetricsViewTimeRangeResponse](
			httpClient,
			baseURL+QueryServiceMetricsViewTimeRangeProcedure,
			opts...,
		),
		columnRollupInterval: connect_go.NewClient[v1.ColumnRollupIntervalRequest, v1.ColumnRollupIntervalResponse](
			httpClient,
			baseURL+QueryServiceColumnRollupIntervalProcedure,
			opts...,
		),
		columnTopK: connect_go.NewClient[v1.ColumnTopKRequest, v1.ColumnTopKResponse](
			httpClient,
			baseURL+QueryServiceColumnTopKProcedure,
			opts...,
		),
		columnNullCount: connect_go.NewClient[v1.ColumnNullCountRequest, v1.ColumnNullCountResponse](
			httpClient,
			baseURL+QueryServiceColumnNullCountProcedure,
			opts...,
		),
		columnDescriptiveStatistics: connect_go.NewClient[v1.ColumnDescriptiveStatisticsRequest, v1.ColumnDescriptiveStatisticsResponse](
			httpClient,
			baseURL+QueryServiceColumnDescriptiveStatisticsProcedure,
			opts...,
		),
		columnTimeGrain: connect_go.NewClient[v1.ColumnTimeGrainRequest, v1.ColumnTimeGrainResponse](
			httpClient,
			baseURL+QueryServiceColumnTimeGrainProcedure,
			opts...,
		),
		columnNumericHistogram: connect_go.NewClient[v1.ColumnNumericHistogramRequest, v1.ColumnNumericHistogramResponse](
			httpClient,
			baseURL+QueryServiceColumnNumericHistogramProcedure,
			opts...,
		),
		columnRugHistogram: connect_go.NewClient[v1.ColumnRugHistogramRequest, v1.ColumnRugHistogramResponse](
			httpClient,
			baseURL+QueryServiceColumnRugHistogramProcedure,
			opts...,
		),
		columnTimeRange: connect_go.NewClient[v1.ColumnTimeRangeRequest, v1.ColumnTimeRangeResponse](
			httpClient,
			baseURL+QueryServiceColumnTimeRangeProcedure,
			opts...,
		),
		columnCardinality: connect_go.NewClient[v1.ColumnCardinalityRequest, v1.ColumnCardinalityResponse](
			httpClient,
			baseURL+QueryServiceColumnCardinalityProcedure,
			opts...,
		),
		columnTimeSeries: connect_go.NewClient[v1.ColumnTimeSeriesRequest, v1.ColumnTimeSeriesResponse](
			httpClient,
			baseURL+QueryServiceColumnTimeSeriesProcedure,
			opts...,
		),
		tableCardinality: connect_go.NewClient[v1.TableCardinalityRequest, v1.TableCardinalityResponse](
			httpClient,
			baseURL+QueryServiceTableCardinalityProcedure,
			opts...,
		),
		tableColumns: connect_go.NewClient[v1.TableColumnsRequest, v1.TableColumnsResponse](
			httpClient,
			baseURL+QueryServiceTableColumnsProcedure,
			opts...,
		),
		tableRows: connect_go.NewClient[v1.TableRowsRequest, v1.TableRowsResponse](
			httpClient,
			baseURL+QueryServiceTableRowsProcedure,
			opts...,
		),
		queryBatch: connect_go.NewClient[v1.QueryBatchRequest, v1.QueryBatchResponse](
			httpClient,
			baseURL+QueryServiceQueryBatchProcedure,
			opts...,
		),
	}
}

// queryServiceClient implements QueryServiceClient.
type queryServiceClient struct {
	query                        *connect_go.Client[v1.QueryRequest, v1.QueryResponse]
	export                       *connect_go.Client[v1.ExportRequest, v1.ExportResponse]
	metricsViewToplist           *connect_go.Client[v1.MetricsViewToplistRequest, v1.MetricsViewToplistResponse]
	metricsViewComparisonToplist *connect_go.Client[v1.MetricsViewComparisonToplistRequest, v1.MetricsViewComparisonToplistResponse]
	metricsViewTimeSeries        *connect_go.Client[v1.MetricsViewTimeSeriesRequest, v1.MetricsViewTimeSeriesResponse]
	metricsViewTotals            *connect_go.Client[v1.MetricsViewTotalsRequest, v1.MetricsViewTotalsResponse]
	metricsViewRows              *connect_go.Client[v1.MetricsViewRowsRequest, v1.MetricsViewRowsResponse]
	metricsViewTimeRange         *connect_go.Client[v1.MetricsViewTimeRangeRequest, v1.MetricsViewTimeRangeResponse]
	columnRollupInterval         *connect_go.Client[v1.ColumnRollupIntervalRequest, v1.ColumnRollupIntervalResponse]
	columnTopK                   *connect_go.Client[v1.ColumnTopKRequest, v1.ColumnTopKResponse]
	columnNullCount              *connect_go.Client[v1.ColumnNullCountRequest, v1.ColumnNullCountResponse]
	columnDescriptiveStatistics  *connect_go.Client[v1.ColumnDescriptiveStatisticsRequest, v1.ColumnDescriptiveStatisticsResponse]
	columnTimeGrain              *connect_go.Client[v1.ColumnTimeGrainRequest, v1.ColumnTimeGrainResponse]
	columnNumericHistogram       *connect_go.Client[v1.ColumnNumericHistogramRequest, v1.ColumnNumericHistogramResponse]
	columnRugHistogram           *connect_go.Client[v1.ColumnRugHistogramRequest, v1.ColumnRugHistogramResponse]
	columnTimeRange              *connect_go.Client[v1.ColumnTimeRangeRequest, v1.ColumnTimeRangeResponse]
	columnCardinality            *connect_go.Client[v1.ColumnCardinalityRequest, v1.ColumnCardinalityResponse]
	columnTimeSeries             *connect_go.Client[v1.ColumnTimeSeriesRequest, v1.ColumnTimeSeriesResponse]
	tableCardinality             *connect_go.Client[v1.TableCardinalityRequest, v1.TableCardinalityResponse]
	tableColumns                 *connect_go.Client[v1.TableColumnsRequest, v1.TableColumnsResponse]
	tableRows                    *connect_go.Client[v1.TableRowsRequest, v1.TableRowsResponse]
	queryBatch                   *connect_go.Client[v1.QueryBatchRequest, v1.QueryBatchResponse]
}

// Query calls rill.runtime.v1.QueryService.Query.
func (c *queryServiceClient) Query(ctx context.Context, req *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// Export calls rill.runtime.v1.QueryService.Export.
func (c *queryServiceClient) Export(ctx context.Context, req *connect_go.Request[v1.ExportRequest]) (*connect_go.Response[v1.ExportResponse], error) {
	return c.export.CallUnary(ctx, req)
}

// MetricsViewToplist calls rill.runtime.v1.QueryService.MetricsViewToplist.
func (c *queryServiceClient) MetricsViewToplist(ctx context.Context, req *connect_go.Request[v1.MetricsViewToplistRequest]) (*connect_go.Response[v1.MetricsViewToplistResponse], error) {
	return c.metricsViewToplist.CallUnary(ctx, req)
}

// MetricsViewComparisonToplist calls rill.runtime.v1.QueryService.MetricsViewComparisonToplist.
func (c *queryServiceClient) MetricsViewComparisonToplist(ctx context.Context, req *connect_go.Request[v1.MetricsViewComparisonToplistRequest]) (*connect_go.Response[v1.MetricsViewComparisonToplistResponse], error) {
	return c.metricsViewComparisonToplist.CallUnary(ctx, req)
}

// MetricsViewTimeSeries calls rill.runtime.v1.QueryService.MetricsViewTimeSeries.
func (c *queryServiceClient) MetricsViewTimeSeries(ctx context.Context, req *connect_go.Request[v1.MetricsViewTimeSeriesRequest]) (*connect_go.Response[v1.MetricsViewTimeSeriesResponse], error) {
	return c.metricsViewTimeSeries.CallUnary(ctx, req)
}

// MetricsViewTotals calls rill.runtime.v1.QueryService.MetricsViewTotals.
func (c *queryServiceClient) MetricsViewTotals(ctx context.Context, req *connect_go.Request[v1.MetricsViewTotalsRequest]) (*connect_go.Response[v1.MetricsViewTotalsResponse], error) {
	return c.metricsViewTotals.CallUnary(ctx, req)
}

// MetricsViewRows calls rill.runtime.v1.QueryService.MetricsViewRows.
func (c *queryServiceClient) MetricsViewRows(ctx context.Context, req *connect_go.Request[v1.MetricsViewRowsRequest]) (*connect_go.Response[v1.MetricsViewRowsResponse], error) {
	return c.metricsViewRows.CallUnary(ctx, req)
}

// MetricsViewTimeRange calls rill.runtime.v1.QueryService.MetricsViewTimeRange.
func (c *queryServiceClient) MetricsViewTimeRange(ctx context.Context, req *connect_go.Request[v1.MetricsViewTimeRangeRequest]) (*connect_go.Response[v1.MetricsViewTimeRangeResponse], error) {
	return c.metricsViewTimeRange.CallUnary(ctx, req)
}

// ColumnRollupInterval calls rill.runtime.v1.QueryService.ColumnRollupInterval.
func (c *queryServiceClient) ColumnRollupInterval(ctx context.Context, req *connect_go.Request[v1.ColumnRollupIntervalRequest]) (*connect_go.Response[v1.ColumnRollupIntervalResponse], error) {
	return c.columnRollupInterval.CallUnary(ctx, req)
}

// ColumnTopK calls rill.runtime.v1.QueryService.ColumnTopK.
func (c *queryServiceClient) ColumnTopK(ctx context.Context, req *connect_go.Request[v1.ColumnTopKRequest]) (*connect_go.Response[v1.ColumnTopKResponse], error) {
	return c.columnTopK.CallUnary(ctx, req)
}

// ColumnNullCount calls rill.runtime.v1.QueryService.ColumnNullCount.
func (c *queryServiceClient) ColumnNullCount(ctx context.Context, req *connect_go.Request[v1.ColumnNullCountRequest]) (*connect_go.Response[v1.ColumnNullCountResponse], error) {
	return c.columnNullCount.CallUnary(ctx, req)
}

// ColumnDescriptiveStatistics calls rill.runtime.v1.QueryService.ColumnDescriptiveStatistics.
func (c *queryServiceClient) ColumnDescriptiveStatistics(ctx context.Context, req *connect_go.Request[v1.ColumnDescriptiveStatisticsRequest]) (*connect_go.Response[v1.ColumnDescriptiveStatisticsResponse], error) {
	return c.columnDescriptiveStatistics.CallUnary(ctx, req)
}

// ColumnTimeGrain calls rill.runtime.v1.QueryService.ColumnTimeGrain.
func (c *queryServiceClient) ColumnTimeGrain(ctx context.Context, req *connect_go.Request[v1.ColumnTimeGrainRequest]) (*connect_go.Response[v1.ColumnTimeGrainResponse], error) {
	return c.columnTimeGrain.CallUnary(ctx, req)
}

// ColumnNumericHistogram calls rill.runtime.v1.QueryService.ColumnNumericHistogram.
func (c *queryServiceClient) ColumnNumericHistogram(ctx context.Context, req *connect_go.Request[v1.ColumnNumericHistogramRequest]) (*connect_go.Response[v1.ColumnNumericHistogramResponse], error) {
	return c.columnNumericHistogram.CallUnary(ctx, req)
}

// ColumnRugHistogram calls rill.runtime.v1.QueryService.ColumnRugHistogram.
func (c *queryServiceClient) ColumnRugHistogram(ctx context.Context, req *connect_go.Request[v1.ColumnRugHistogramRequest]) (*connect_go.Response[v1.ColumnRugHistogramResponse], error) {
	return c.columnRugHistogram.CallUnary(ctx, req)
}

// ColumnTimeRange calls rill.runtime.v1.QueryService.ColumnTimeRange.
func (c *queryServiceClient) ColumnTimeRange(ctx context.Context, req *connect_go.Request[v1.ColumnTimeRangeRequest]) (*connect_go.Response[v1.ColumnTimeRangeResponse], error) {
	return c.columnTimeRange.CallUnary(ctx, req)
}

// ColumnCardinality calls rill.runtime.v1.QueryService.ColumnCardinality.
func (c *queryServiceClient) ColumnCardinality(ctx context.Context, req *connect_go.Request[v1.ColumnCardinalityRequest]) (*connect_go.Response[v1.ColumnCardinalityResponse], error) {
	return c.columnCardinality.CallUnary(ctx, req)
}

// ColumnTimeSeries calls rill.runtime.v1.QueryService.ColumnTimeSeries.
func (c *queryServiceClient) ColumnTimeSeries(ctx context.Context, req *connect_go.Request[v1.ColumnTimeSeriesRequest]) (*connect_go.Response[v1.ColumnTimeSeriesResponse], error) {
	return c.columnTimeSeries.CallUnary(ctx, req)
}

// TableCardinality calls rill.runtime.v1.QueryService.TableCardinality.
func (c *queryServiceClient) TableCardinality(ctx context.Context, req *connect_go.Request[v1.TableCardinalityRequest]) (*connect_go.Response[v1.TableCardinalityResponse], error) {
	return c.tableCardinality.CallUnary(ctx, req)
}

// TableColumns calls rill.runtime.v1.QueryService.TableColumns.
func (c *queryServiceClient) TableColumns(ctx context.Context, req *connect_go.Request[v1.TableColumnsRequest]) (*connect_go.Response[v1.TableColumnsResponse], error) {
	return c.tableColumns.CallUnary(ctx, req)
}

// TableRows calls rill.runtime.v1.QueryService.TableRows.
func (c *queryServiceClient) TableRows(ctx context.Context, req *connect_go.Request[v1.TableRowsRequest]) (*connect_go.Response[v1.TableRowsResponse], error) {
	return c.tableRows.CallUnary(ctx, req)
}

// QueryBatch calls rill.runtime.v1.QueryService.QueryBatch.
func (c *queryServiceClient) QueryBatch(ctx context.Context, req *connect_go.Request[v1.QueryBatchRequest]) (*connect_go.ServerStreamForClient[v1.QueryBatchResponse], error) {
	return c.queryBatch.CallServerStream(ctx, req)
}

// QueryServiceHandler is an implementation of the rill.runtime.v1.QueryService service.
type QueryServiceHandler interface {
	// Query runs a SQL query against the instance's OLAP datastore.
	Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error)
	// Export builds a URL to download the results of a query as a file.
	Export(context.Context, *connect_go.Request[v1.ExportRequest]) (*connect_go.Response[v1.ExportResponse], error)
	// MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
	// It's a convenience API for querying a metrics view.
	MetricsViewToplist(context.Context, *connect_go.Request[v1.MetricsViewToplistRequest]) (*connect_go.Response[v1.MetricsViewToplistResponse], error)
	MetricsViewComparisonToplist(context.Context, *connect_go.Request[v1.MetricsViewComparisonToplistRequest]) (*connect_go.Response[v1.MetricsViewComparisonToplistResponse], error)
	// MetricsViewTimeSeries returns time series for the measures in the metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTimeSeries(context.Context, *connect_go.Request[v1.MetricsViewTimeSeriesRequest]) (*connect_go.Response[v1.MetricsViewTimeSeriesResponse], error)
	// MetricsViewTotals returns totals over a time period for the measures in a metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTotals(context.Context, *connect_go.Request[v1.MetricsViewTotalsRequest]) (*connect_go.Response[v1.MetricsViewTotalsResponse], error)
	// MetricsViewRows returns the underlying model rows matching a metrics view time range and filter(s).
	MetricsViewRows(context.Context, *connect_go.Request[v1.MetricsViewRowsRequest]) (*connect_go.Response[v1.MetricsViewRowsResponse], error)
	// MetricsViewTimeRange Get the time range summaries (min, max) for time column in a metrics view
	MetricsViewTimeRange(context.Context, *connect_go.Request[v1.MetricsViewTimeRangeRequest]) (*connect_go.Response[v1.MetricsViewTimeRangeResponse], error)
	// ColumnRollupInterval returns the minimum time granularity (as well as the time range) for a specified timestamp column
	ColumnRollupInterval(context.Context, *connect_go.Request[v1.ColumnRollupIntervalRequest]) (*connect_go.Response[v1.ColumnRollupIntervalResponse], error)
	// Get TopK elements from a table for a column given an agg function
	// agg function and k are optional, defaults are count(*) and 50 respectively
	ColumnTopK(context.Context, *connect_go.Request[v1.ColumnTopKRequest]) (*connect_go.Response[v1.ColumnTopKResponse], error)
	// Get the number of nulls in a column
	ColumnNullCount(context.Context, *connect_go.Request[v1.ColumnNullCountRequest]) (*connect_go.Response[v1.ColumnNullCountResponse], error)
	// Get basic stats for a numeric column like min, max, mean, stddev, etc
	ColumnDescriptiveStatistics(context.Context, *connect_go.Request[v1.ColumnDescriptiveStatisticsRequest]) (*connect_go.Response[v1.ColumnDescriptiveStatisticsResponse], error)
	// Estimates the smallest time grain present in the column
	ColumnTimeGrain(context.Context, *connect_go.Request[v1.ColumnTimeGrainRequest]) (*connect_go.Response[v1.ColumnTimeGrainResponse], error)
	// Get the histogram for values in a column
	ColumnNumericHistogram(context.Context, *connect_go.Request[v1.ColumnNumericHistogramRequest]) (*connect_go.Response[v1.ColumnNumericHistogramResponse], error)
	// Get outliers for a numeric column
	ColumnRugHistogram(context.Context, *connect_go.Request[v1.ColumnRugHistogramRequest]) (*connect_go.Response[v1.ColumnRugHistogramResponse], error)
	// Get the time range summaries (min, max) for a column
	ColumnTimeRange(context.Context, *connect_go.Request[v1.ColumnTimeRangeRequest]) (*connect_go.Response[v1.ColumnTimeRangeResponse], error)
	// Get cardinality for a column
	ColumnCardinality(context.Context, *connect_go.Request[v1.ColumnCardinalityRequest]) (*connect_go.Response[v1.ColumnCardinalityResponse], error)
	// Generate time series for the given measures (aggregation expressions) along with the sparkline timeseries
	ColumnTimeSeries(context.Context, *connect_go.Request[v1.ColumnTimeSeriesRequest]) (*connect_go.Response[v1.ColumnTimeSeriesResponse], error)
	// TableCardinality returns row count
	TableCardinality(context.Context, *connect_go.Request[v1.TableCardinalityRequest]) (*connect_go.Response[v1.TableCardinalityResponse], error)
	// TableColumns returns column profiles
	TableColumns(context.Context, *connect_go.Request[v1.TableColumnsRequest]) (*connect_go.Response[v1.TableColumnsResponse], error)
	// TableRows returns table rows
	TableRows(context.Context, *connect_go.Request[v1.TableRowsRequest]) (*connect_go.Response[v1.TableRowsResponse], error)
	// Batch request with different queries
	QueryBatch(context.Context, *connect_go.Request[v1.QueryBatchRequest], *connect_go.ServerStream[v1.QueryBatchResponse]) error
}

// NewQueryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueryServiceHandler(svc QueryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	queryServiceQueryHandler := connect_go.NewUnaryHandler(
		QueryServiceQueryProcedure,
		svc.Query,
		opts...,
	)
	queryServiceExportHandler := connect_go.NewUnaryHandler(
		QueryServiceExportProcedure,
		svc.Export,
		opts...,
	)
	queryServiceMetricsViewToplistHandler := connect_go.NewUnaryHandler(
		QueryServiceMetricsViewToplistProcedure,
		svc.MetricsViewToplist,
		opts...,
	)
	queryServiceMetricsViewComparisonToplistHandler := connect_go.NewUnaryHandler(
		QueryServiceMetricsViewComparisonToplistProcedure,
		svc.MetricsViewComparisonToplist,
		opts...,
	)
	queryServiceMetricsViewTimeSeriesHandler := connect_go.NewUnaryHandler(
		QueryServiceMetricsViewTimeSeriesProcedure,
		svc.MetricsViewTimeSeries,
		opts...,
	)
	queryServiceMetricsViewTotalsHandler := connect_go.NewUnaryHandler(
		QueryServiceMetricsViewTotalsProcedure,
		svc.MetricsViewTotals,
		opts...,
	)
	queryServiceMetricsViewRowsHandler := connect_go.NewUnaryHandler(
		QueryServiceMetricsViewRowsProcedure,
		svc.MetricsViewRows,
		opts...,
	)
	queryServiceMetricsViewTimeRangeHandler := connect_go.NewUnaryHandler(
		QueryServiceMetricsViewTimeRangeProcedure,
		svc.MetricsViewTimeRange,
		opts...,
	)
	queryServiceColumnRollupIntervalHandler := connect_go.NewUnaryHandler(
		QueryServiceColumnRollupIntervalProcedure,
		svc.ColumnRollupInterval,
		opts...,
	)
	queryServiceColumnTopKHandler := connect_go.NewUnaryHandler(
		QueryServiceColumnTopKProcedure,
		svc.ColumnTopK,
		opts...,
	)
	queryServiceColumnNullCountHandler := connect_go.NewUnaryHandler(
		QueryServiceColumnNullCountProcedure,
		svc.ColumnNullCount,
		opts...,
	)
	queryServiceColumnDescriptiveStatisticsHandler := connect_go.NewUnaryHandler(
		QueryServiceColumnDescriptiveStatisticsProcedure,
		svc.ColumnDescriptiveStatistics,
		opts...,
	)
	queryServiceColumnTimeGrainHandler := connect_go.NewUnaryHandler(
		QueryServiceColumnTimeGrainProcedure,
		svc.ColumnTimeGrain,
		opts...,
	)
	queryServiceColumnNumericHistogramHandler := connect_go.NewUnaryHandler(
		QueryServiceColumnNumericHistogramProcedure,
		svc.ColumnNumericHistogram,
		opts...,
	)
	queryServiceColumnRugHistogramHandler := connect_go.NewUnaryHandler(
		QueryServiceColumnRugHistogramProcedure,
		svc.ColumnRugHistogram,
		opts...,
	)
	queryServiceColumnTimeRangeHandler := connect_go.NewUnaryHandler(
		QueryServiceColumnTimeRangeProcedure,
		svc.ColumnTimeRange,
		opts...,
	)
	queryServiceColumnCardinalityHandler := connect_go.NewUnaryHandler(
		QueryServiceColumnCardinalityProcedure,
		svc.ColumnCardinality,
		opts...,
	)
	queryServiceColumnTimeSeriesHandler := connect_go.NewUnaryHandler(
		QueryServiceColumnTimeSeriesProcedure,
		svc.ColumnTimeSeries,
		opts...,
	)
	queryServiceTableCardinalityHandler := connect_go.NewUnaryHandler(
		QueryServiceTableCardinalityProcedure,
		svc.TableCardinality,
		opts...,
	)
	queryServiceTableColumnsHandler := connect_go.NewUnaryHandler(
		QueryServiceTableColumnsProcedure,
		svc.TableColumns,
		opts...,
	)
	queryServiceTableRowsHandler := connect_go.NewUnaryHandler(
		QueryServiceTableRowsProcedure,
		svc.TableRows,
		opts...,
	)
	queryServiceQueryBatchHandler := connect_go.NewServerStreamHandler(
		QueryServiceQueryBatchProcedure,
		svc.QueryBatch,
		opts...,
	)
	return "/rill.runtime.v1.QueryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueryServiceQueryProcedure:
			queryServiceQueryHandler.ServeHTTP(w, r)
		case QueryServiceExportProcedure:
			queryServiceExportHandler.ServeHTTP(w, r)
		case QueryServiceMetricsViewToplistProcedure:
			queryServiceMetricsViewToplistHandler.ServeHTTP(w, r)
		case QueryServiceMetricsViewComparisonToplistProcedure:
			queryServiceMetricsViewComparisonToplistHandler.ServeHTTP(w, r)
		case QueryServiceMetricsViewTimeSeriesProcedure:
			queryServiceMetricsViewTimeSeriesHandler.ServeHTTP(w, r)
		case QueryServiceMetricsViewTotalsProcedure:
			queryServiceMetricsViewTotalsHandler.ServeHTTP(w, r)
		case QueryServiceMetricsViewRowsProcedure:
			queryServiceMetricsViewRowsHandler.ServeHTTP(w, r)
		case QueryServiceMetricsViewTimeRangeProcedure:
			queryServiceMetricsViewTimeRangeHandler.ServeHTTP(w, r)
		case QueryServiceColumnRollupIntervalProcedure:
			queryServiceColumnRollupIntervalHandler.ServeHTTP(w, r)
		case QueryServiceColumnTopKProcedure:
			queryServiceColumnTopKHandler.ServeHTTP(w, r)
		case QueryServiceColumnNullCountProcedure:
			queryServiceColumnNullCountHandler.ServeHTTP(w, r)
		case QueryServiceColumnDescriptiveStatisticsProcedure:
			queryServiceColumnDescriptiveStatisticsHandler.ServeHTTP(w, r)
		case QueryServiceColumnTimeGrainProcedure:
			queryServiceColumnTimeGrainHandler.ServeHTTP(w, r)
		case QueryServiceColumnNumericHistogramProcedure:
			queryServiceColumnNumericHistogramHandler.ServeHTTP(w, r)
		case QueryServiceColumnRugHistogramProcedure:
			queryServiceColumnRugHistogramHandler.ServeHTTP(w, r)
		case QueryServiceColumnTimeRangeProcedure:
			queryServiceColumnTimeRangeHandler.ServeHTTP(w, r)
		case QueryServiceColumnCardinalityProcedure:
			queryServiceColumnCardinalityHandler.ServeHTTP(w, r)
		case QueryServiceColumnTimeSeriesProcedure:
			queryServiceColumnTimeSeriesHandler.ServeHTTP(w, r)
		case QueryServiceTableCardinalityProcedure:
			queryServiceTableCardinalityHandler.ServeHTTP(w, r)
		case QueryServiceTableColumnsProcedure:
			queryServiceTableColumnsHandler.ServeHTTP(w, r)
		case QueryServiceTableRowsProcedure:
			queryServiceTableRowsHandler.ServeHTTP(w, r)
		case QueryServiceQueryBatchProcedure:
			queryServiceQueryBatchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQueryServiceHandler struct{}

func (UnimplementedQueryServiceHandler) Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.Query is not implemented"))
}

func (UnimplementedQueryServiceHandler) Export(context.Context, *connect_go.Request[v1.ExportRequest]) (*connect_go.Response[v1.ExportResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.Export is not implemented"))
}

func (UnimplementedQueryServiceHandler) MetricsViewToplist(context.Context, *connect_go.Request[v1.MetricsViewToplistRequest]) (*connect_go.Response[v1.MetricsViewToplistResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.MetricsViewToplist is not implemented"))
}

func (UnimplementedQueryServiceHandler) MetricsViewComparisonToplist(context.Context, *connect_go.Request[v1.MetricsViewComparisonToplistRequest]) (*connect_go.Response[v1.MetricsViewComparisonToplistResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.MetricsViewComparisonToplist is not implemented"))
}

func (UnimplementedQueryServiceHandler) MetricsViewTimeSeries(context.Context, *connect_go.Request[v1.MetricsViewTimeSeriesRequest]) (*connect_go.Response[v1.MetricsViewTimeSeriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.MetricsViewTimeSeries is not implemented"))
}

func (UnimplementedQueryServiceHandler) MetricsViewTotals(context.Context, *connect_go.Request[v1.MetricsViewTotalsRequest]) (*connect_go.Response[v1.MetricsViewTotalsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.MetricsViewTotals is not implemented"))
}

func (UnimplementedQueryServiceHandler) MetricsViewRows(context.Context, *connect_go.Request[v1.MetricsViewRowsRequest]) (*connect_go.Response[v1.MetricsViewRowsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.MetricsViewRows is not implemented"))
}

func (UnimplementedQueryServiceHandler) MetricsViewTimeRange(context.Context, *connect_go.Request[v1.MetricsViewTimeRangeRequest]) (*connect_go.Response[v1.MetricsViewTimeRangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.MetricsViewTimeRange is not implemented"))
}

func (UnimplementedQueryServiceHandler) ColumnRollupInterval(context.Context, *connect_go.Request[v1.ColumnRollupIntervalRequest]) (*connect_go.Response[v1.ColumnRollupIntervalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.ColumnRollupInterval is not implemented"))
}

func (UnimplementedQueryServiceHandler) ColumnTopK(context.Context, *connect_go.Request[v1.ColumnTopKRequest]) (*connect_go.Response[v1.ColumnTopKResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.ColumnTopK is not implemented"))
}

func (UnimplementedQueryServiceHandler) ColumnNullCount(context.Context, *connect_go.Request[v1.ColumnNullCountRequest]) (*connect_go.Response[v1.ColumnNullCountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.ColumnNullCount is not implemented"))
}

func (UnimplementedQueryServiceHandler) ColumnDescriptiveStatistics(context.Context, *connect_go.Request[v1.ColumnDescriptiveStatisticsRequest]) (*connect_go.Response[v1.ColumnDescriptiveStatisticsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.ColumnDescriptiveStatistics is not implemented"))
}

func (UnimplementedQueryServiceHandler) ColumnTimeGrain(context.Context, *connect_go.Request[v1.ColumnTimeGrainRequest]) (*connect_go.Response[v1.ColumnTimeGrainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.ColumnTimeGrain is not implemented"))
}

func (UnimplementedQueryServiceHandler) ColumnNumericHistogram(context.Context, *connect_go.Request[v1.ColumnNumericHistogramRequest]) (*connect_go.Response[v1.ColumnNumericHistogramResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.ColumnNumericHistogram is not implemented"))
}

func (UnimplementedQueryServiceHandler) ColumnRugHistogram(context.Context, *connect_go.Request[v1.ColumnRugHistogramRequest]) (*connect_go.Response[v1.ColumnRugHistogramResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.ColumnRugHistogram is not implemented"))
}

func (UnimplementedQueryServiceHandler) ColumnTimeRange(context.Context, *connect_go.Request[v1.ColumnTimeRangeRequest]) (*connect_go.Response[v1.ColumnTimeRangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.ColumnTimeRange is not implemented"))
}

func (UnimplementedQueryServiceHandler) ColumnCardinality(context.Context, *connect_go.Request[v1.ColumnCardinalityRequest]) (*connect_go.Response[v1.ColumnCardinalityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.ColumnCardinality is not implemented"))
}

func (UnimplementedQueryServiceHandler) ColumnTimeSeries(context.Context, *connect_go.Request[v1.ColumnTimeSeriesRequest]) (*connect_go.Response[v1.ColumnTimeSeriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.ColumnTimeSeries is not implemented"))
}

func (UnimplementedQueryServiceHandler) TableCardinality(context.Context, *connect_go.Request[v1.TableCardinalityRequest]) (*connect_go.Response[v1.TableCardinalityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.TableCardinality is not implemented"))
}

func (UnimplementedQueryServiceHandler) TableColumns(context.Context, *connect_go.Request[v1.TableColumnsRequest]) (*connect_go.Response[v1.TableColumnsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.TableColumns is not implemented"))
}

func (UnimplementedQueryServiceHandler) TableRows(context.Context, *connect_go.Request[v1.TableRowsRequest]) (*connect_go.Response[v1.TableRowsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.TableRows is not implemented"))
}

func (UnimplementedQueryServiceHandler) QueryBatch(context.Context, *connect_go.Request[v1.QueryBatchRequest], *connect_go.ServerStream[v1.QueryBatchResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.QueryService.QueryBatch is not implemented"))
}
