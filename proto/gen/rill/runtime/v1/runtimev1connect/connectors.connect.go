// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rill/runtime/v1/connectors.proto

package runtimev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/rilldata/rill/proto/gen/rill/runtime/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ConnectorServiceName is the fully-qualified name of the ConnectorService service.
	ConnectorServiceName = "rill.runtime.v1.ConnectorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConnectorServiceS3ListBucketsProcedure is the fully-qualified name of the ConnectorService's
	// S3ListBuckets RPC.
	ConnectorServiceS3ListBucketsProcedure = "/rill.runtime.v1.ConnectorService/S3ListBuckets"
	// ConnectorServiceS3ListObjectsProcedure is the fully-qualified name of the ConnectorService's
	// S3ListObjects RPC.
	ConnectorServiceS3ListObjectsProcedure = "/rill.runtime.v1.ConnectorService/S3ListObjects"
	// ConnectorServiceS3GetBucketMetadataProcedure is the fully-qualified name of the
	// ConnectorService's S3GetBucketMetadata RPC.
	ConnectorServiceS3GetBucketMetadataProcedure = "/rill.runtime.v1.ConnectorService/S3GetBucketMetadata"
	// ConnectorServiceS3GetCredentialsInfoProcedure is the fully-qualified name of the
	// ConnectorService's S3GetCredentialsInfo RPC.
	ConnectorServiceS3GetCredentialsInfoProcedure = "/rill.runtime.v1.ConnectorService/S3GetCredentialsInfo"
	// ConnectorServiceGCSListBucketsProcedure is the fully-qualified name of the ConnectorService's
	// GCSListBuckets RPC.
	ConnectorServiceGCSListBucketsProcedure = "/rill.runtime.v1.ConnectorService/GCSListBuckets"
	// ConnectorServiceGCSListObjectsProcedure is the fully-qualified name of the ConnectorService's
	// GCSListObjects RPC.
	ConnectorServiceGCSListObjectsProcedure = "/rill.runtime.v1.ConnectorService/GCSListObjects"
	// ConnectorServiceGCSGetCredentialsInfoProcedure is the fully-qualified name of the
	// ConnectorService's GCSGetCredentialsInfo RPC.
	ConnectorServiceGCSGetCredentialsInfoProcedure = "/rill.runtime.v1.ConnectorService/GCSGetCredentialsInfo"
	// ConnectorServiceOLAPListTablesProcedure is the fully-qualified name of the ConnectorService's
	// OLAPListTables RPC.
	ConnectorServiceOLAPListTablesProcedure = "/rill.runtime.v1.ConnectorService/OLAPListTables"
	// ConnectorServiceBigQueryListDatasetsProcedure is the fully-qualified name of the
	// ConnectorService's BigQueryListDatasets RPC.
	ConnectorServiceBigQueryListDatasetsProcedure = "/rill.runtime.v1.ConnectorService/BigQueryListDatasets"
	// ConnectorServiceBigQueryListTablesProcedure is the fully-qualified name of the ConnectorService's
	// BigQueryListTables RPC.
	ConnectorServiceBigQueryListTablesProcedure = "/rill.runtime.v1.ConnectorService/BigQueryListTables"
)

// ConnectorServiceClient is a client for the rill.runtime.v1.ConnectorService service.
type ConnectorServiceClient interface {
	// S3ListBuckets lists buckets accessible with the configured credentials.
	S3ListBuckets(context.Context, *connect_go.Request[v1.S3ListBucketsRequest]) (*connect_go.Response[v1.S3ListBucketsResponse], error)
	// S3ListBuckets lists objects for the given bucket.
	S3ListObjects(context.Context, *connect_go.Request[v1.S3ListObjectsRequest]) (*connect_go.Response[v1.S3ListObjectsResponse], error)
	// S3GetBucketMetadata returns metadata for the given bucket.
	S3GetBucketMetadata(context.Context, *connect_go.Request[v1.S3GetBucketMetadataRequest]) (*connect_go.Response[v1.S3GetBucketMetadataResponse], error)
	// S3GetCredentialsInfo returns metadata for the given bucket.
	S3GetCredentialsInfo(context.Context, *connect_go.Request[v1.S3GetCredentialsInfoRequest]) (*connect_go.Response[v1.S3GetCredentialsInfoResponse], error)
	// GCSListBuckets lists buckets accessible with the configured credentials.
	GCSListBuckets(context.Context, *connect_go.Request[v1.GCSListBucketsRequest]) (*connect_go.Response[v1.GCSListBucketsResponse], error)
	// GCSListObjects lists objects for the given bucket.
	GCSListObjects(context.Context, *connect_go.Request[v1.GCSListObjectsRequest]) (*connect_go.Response[v1.GCSListObjectsResponse], error)
	// GCSGetCredentialsInfo returns metadata for the given bucket.
	GCSGetCredentialsInfo(context.Context, *connect_go.Request[v1.GCSGetCredentialsInfoRequest]) (*connect_go.Response[v1.GCSGetCredentialsInfoResponse], error)
	// OLAPListTables list all tables across all databases on motherduck
	OLAPListTables(context.Context, *connect_go.Request[v1.OLAPListTablesRequest]) (*connect_go.Response[v1.OLAPListTablesResponse], error)
	// BigQueryListDatasets list all datasets in a bigquery project
	BigQueryListDatasets(context.Context, *connect_go.Request[v1.BigQueryListDatasetsRequest]) (*connect_go.Response[v1.BigQueryListDatasetsResponse], error)
	// BigQueryListTables list all tables in a bigquery project:dataset
	BigQueryListTables(context.Context, *connect_go.Request[v1.BigQueryListTablesRequest]) (*connect_go.Response[v1.BigQueryListTablesResponse], error)
}

// NewConnectorServiceClient constructs a client for the rill.runtime.v1.ConnectorService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectorServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ConnectorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &connectorServiceClient{
		s3ListBuckets: connect_go.NewClient[v1.S3ListBucketsRequest, v1.S3ListBucketsResponse](
			httpClient,
			baseURL+ConnectorServiceS3ListBucketsProcedure,
			opts...,
		),
		s3ListObjects: connect_go.NewClient[v1.S3ListObjectsRequest, v1.S3ListObjectsResponse](
			httpClient,
			baseURL+ConnectorServiceS3ListObjectsProcedure,
			opts...,
		),
		s3GetBucketMetadata: connect_go.NewClient[v1.S3GetBucketMetadataRequest, v1.S3GetBucketMetadataResponse](
			httpClient,
			baseURL+ConnectorServiceS3GetBucketMetadataProcedure,
			opts...,
		),
		s3GetCredentialsInfo: connect_go.NewClient[v1.S3GetCredentialsInfoRequest, v1.S3GetCredentialsInfoResponse](
			httpClient,
			baseURL+ConnectorServiceS3GetCredentialsInfoProcedure,
			opts...,
		),
		gCSListBuckets: connect_go.NewClient[v1.GCSListBucketsRequest, v1.GCSListBucketsResponse](
			httpClient,
			baseURL+ConnectorServiceGCSListBucketsProcedure,
			opts...,
		),
		gCSListObjects: connect_go.NewClient[v1.GCSListObjectsRequest, v1.GCSListObjectsResponse](
			httpClient,
			baseURL+ConnectorServiceGCSListObjectsProcedure,
			opts...,
		),
		gCSGetCredentialsInfo: connect_go.NewClient[v1.GCSGetCredentialsInfoRequest, v1.GCSGetCredentialsInfoResponse](
			httpClient,
			baseURL+ConnectorServiceGCSGetCredentialsInfoProcedure,
			opts...,
		),
		oLAPListTables: connect_go.NewClient[v1.OLAPListTablesRequest, v1.OLAPListTablesResponse](
			httpClient,
			baseURL+ConnectorServiceOLAPListTablesProcedure,
			opts...,
		),
		bigQueryListDatasets: connect_go.NewClient[v1.BigQueryListDatasetsRequest, v1.BigQueryListDatasetsResponse](
			httpClient,
			baseURL+ConnectorServiceBigQueryListDatasetsProcedure,
			opts...,
		),
		bigQueryListTables: connect_go.NewClient[v1.BigQueryListTablesRequest, v1.BigQueryListTablesResponse](
			httpClient,
			baseURL+ConnectorServiceBigQueryListTablesProcedure,
			opts...,
		),
	}
}

// connectorServiceClient implements ConnectorServiceClient.
type connectorServiceClient struct {
	s3ListBuckets         *connect_go.Client[v1.S3ListBucketsRequest, v1.S3ListBucketsResponse]
	s3ListObjects         *connect_go.Client[v1.S3ListObjectsRequest, v1.S3ListObjectsResponse]
	s3GetBucketMetadata   *connect_go.Client[v1.S3GetBucketMetadataRequest, v1.S3GetBucketMetadataResponse]
	s3GetCredentialsInfo  *connect_go.Client[v1.S3GetCredentialsInfoRequest, v1.S3GetCredentialsInfoResponse]
	gCSListBuckets        *connect_go.Client[v1.GCSListBucketsRequest, v1.GCSListBucketsResponse]
	gCSListObjects        *connect_go.Client[v1.GCSListObjectsRequest, v1.GCSListObjectsResponse]
	gCSGetCredentialsInfo *connect_go.Client[v1.GCSGetCredentialsInfoRequest, v1.GCSGetCredentialsInfoResponse]
	oLAPListTables        *connect_go.Client[v1.OLAPListTablesRequest, v1.OLAPListTablesResponse]
	bigQueryListDatasets  *connect_go.Client[v1.BigQueryListDatasetsRequest, v1.BigQueryListDatasetsResponse]
	bigQueryListTables    *connect_go.Client[v1.BigQueryListTablesRequest, v1.BigQueryListTablesResponse]
}

// S3ListBuckets calls rill.runtime.v1.ConnectorService.S3ListBuckets.
func (c *connectorServiceClient) S3ListBuckets(ctx context.Context, req *connect_go.Request[v1.S3ListBucketsRequest]) (*connect_go.Response[v1.S3ListBucketsResponse], error) {
	return c.s3ListBuckets.CallUnary(ctx, req)
}

// S3ListObjects calls rill.runtime.v1.ConnectorService.S3ListObjects.
func (c *connectorServiceClient) S3ListObjects(ctx context.Context, req *connect_go.Request[v1.S3ListObjectsRequest]) (*connect_go.Response[v1.S3ListObjectsResponse], error) {
	return c.s3ListObjects.CallUnary(ctx, req)
}

// S3GetBucketMetadata calls rill.runtime.v1.ConnectorService.S3GetBucketMetadata.
func (c *connectorServiceClient) S3GetBucketMetadata(ctx context.Context, req *connect_go.Request[v1.S3GetBucketMetadataRequest]) (*connect_go.Response[v1.S3GetBucketMetadataResponse], error) {
	return c.s3GetBucketMetadata.CallUnary(ctx, req)
}

// S3GetCredentialsInfo calls rill.runtime.v1.ConnectorService.S3GetCredentialsInfo.
func (c *connectorServiceClient) S3GetCredentialsInfo(ctx context.Context, req *connect_go.Request[v1.S3GetCredentialsInfoRequest]) (*connect_go.Response[v1.S3GetCredentialsInfoResponse], error) {
	return c.s3GetCredentialsInfo.CallUnary(ctx, req)
}

// GCSListBuckets calls rill.runtime.v1.ConnectorService.GCSListBuckets.
func (c *connectorServiceClient) GCSListBuckets(ctx context.Context, req *connect_go.Request[v1.GCSListBucketsRequest]) (*connect_go.Response[v1.GCSListBucketsResponse], error) {
	return c.gCSListBuckets.CallUnary(ctx, req)
}

// GCSListObjects calls rill.runtime.v1.ConnectorService.GCSListObjects.
func (c *connectorServiceClient) GCSListObjects(ctx context.Context, req *connect_go.Request[v1.GCSListObjectsRequest]) (*connect_go.Response[v1.GCSListObjectsResponse], error) {
	return c.gCSListObjects.CallUnary(ctx, req)
}

// GCSGetCredentialsInfo calls rill.runtime.v1.ConnectorService.GCSGetCredentialsInfo.
func (c *connectorServiceClient) GCSGetCredentialsInfo(ctx context.Context, req *connect_go.Request[v1.GCSGetCredentialsInfoRequest]) (*connect_go.Response[v1.GCSGetCredentialsInfoResponse], error) {
	return c.gCSGetCredentialsInfo.CallUnary(ctx, req)
}

// OLAPListTables calls rill.runtime.v1.ConnectorService.OLAPListTables.
func (c *connectorServiceClient) OLAPListTables(ctx context.Context, req *connect_go.Request[v1.OLAPListTablesRequest]) (*connect_go.Response[v1.OLAPListTablesResponse], error) {
	return c.oLAPListTables.CallUnary(ctx, req)
}

// BigQueryListDatasets calls rill.runtime.v1.ConnectorService.BigQueryListDatasets.
func (c *connectorServiceClient) BigQueryListDatasets(ctx context.Context, req *connect_go.Request[v1.BigQueryListDatasetsRequest]) (*connect_go.Response[v1.BigQueryListDatasetsResponse], error) {
	return c.bigQueryListDatasets.CallUnary(ctx, req)
}

// BigQueryListTables calls rill.runtime.v1.ConnectorService.BigQueryListTables.
func (c *connectorServiceClient) BigQueryListTables(ctx context.Context, req *connect_go.Request[v1.BigQueryListTablesRequest]) (*connect_go.Response[v1.BigQueryListTablesResponse], error) {
	return c.bigQueryListTables.CallUnary(ctx, req)
}

// ConnectorServiceHandler is an implementation of the rill.runtime.v1.ConnectorService service.
type ConnectorServiceHandler interface {
	// S3ListBuckets lists buckets accessible with the configured credentials.
	S3ListBuckets(context.Context, *connect_go.Request[v1.S3ListBucketsRequest]) (*connect_go.Response[v1.S3ListBucketsResponse], error)
	// S3ListBuckets lists objects for the given bucket.
	S3ListObjects(context.Context, *connect_go.Request[v1.S3ListObjectsRequest]) (*connect_go.Response[v1.S3ListObjectsResponse], error)
	// S3GetBucketMetadata returns metadata for the given bucket.
	S3GetBucketMetadata(context.Context, *connect_go.Request[v1.S3GetBucketMetadataRequest]) (*connect_go.Response[v1.S3GetBucketMetadataResponse], error)
	// S3GetCredentialsInfo returns metadata for the given bucket.
	S3GetCredentialsInfo(context.Context, *connect_go.Request[v1.S3GetCredentialsInfoRequest]) (*connect_go.Response[v1.S3GetCredentialsInfoResponse], error)
	// GCSListBuckets lists buckets accessible with the configured credentials.
	GCSListBuckets(context.Context, *connect_go.Request[v1.GCSListBucketsRequest]) (*connect_go.Response[v1.GCSListBucketsResponse], error)
	// GCSListObjects lists objects for the given bucket.
	GCSListObjects(context.Context, *connect_go.Request[v1.GCSListObjectsRequest]) (*connect_go.Response[v1.GCSListObjectsResponse], error)
	// GCSGetCredentialsInfo returns metadata for the given bucket.
	GCSGetCredentialsInfo(context.Context, *connect_go.Request[v1.GCSGetCredentialsInfoRequest]) (*connect_go.Response[v1.GCSGetCredentialsInfoResponse], error)
	// OLAPListTables list all tables across all databases on motherduck
	OLAPListTables(context.Context, *connect_go.Request[v1.OLAPListTablesRequest]) (*connect_go.Response[v1.OLAPListTablesResponse], error)
	// BigQueryListDatasets list all datasets in a bigquery project
	BigQueryListDatasets(context.Context, *connect_go.Request[v1.BigQueryListDatasetsRequest]) (*connect_go.Response[v1.BigQueryListDatasetsResponse], error)
	// BigQueryListTables list all tables in a bigquery project:dataset
	BigQueryListTables(context.Context, *connect_go.Request[v1.BigQueryListTablesRequest]) (*connect_go.Response[v1.BigQueryListTablesResponse], error)
}

// NewConnectorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectorServiceHandler(svc ConnectorServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	connectorServiceS3ListBucketsHandler := connect_go.NewUnaryHandler(
		ConnectorServiceS3ListBucketsProcedure,
		svc.S3ListBuckets,
		opts...,
	)
	connectorServiceS3ListObjectsHandler := connect_go.NewUnaryHandler(
		ConnectorServiceS3ListObjectsProcedure,
		svc.S3ListObjects,
		opts...,
	)
	connectorServiceS3GetBucketMetadataHandler := connect_go.NewUnaryHandler(
		ConnectorServiceS3GetBucketMetadataProcedure,
		svc.S3GetBucketMetadata,
		opts...,
	)
	connectorServiceS3GetCredentialsInfoHandler := connect_go.NewUnaryHandler(
		ConnectorServiceS3GetCredentialsInfoProcedure,
		svc.S3GetCredentialsInfo,
		opts...,
	)
	connectorServiceGCSListBucketsHandler := connect_go.NewUnaryHandler(
		ConnectorServiceGCSListBucketsProcedure,
		svc.GCSListBuckets,
		opts...,
	)
	connectorServiceGCSListObjectsHandler := connect_go.NewUnaryHandler(
		ConnectorServiceGCSListObjectsProcedure,
		svc.GCSListObjects,
		opts...,
	)
	connectorServiceGCSGetCredentialsInfoHandler := connect_go.NewUnaryHandler(
		ConnectorServiceGCSGetCredentialsInfoProcedure,
		svc.GCSGetCredentialsInfo,
		opts...,
	)
	connectorServiceOLAPListTablesHandler := connect_go.NewUnaryHandler(
		ConnectorServiceOLAPListTablesProcedure,
		svc.OLAPListTables,
		opts...,
	)
	connectorServiceBigQueryListDatasetsHandler := connect_go.NewUnaryHandler(
		ConnectorServiceBigQueryListDatasetsProcedure,
		svc.BigQueryListDatasets,
		opts...,
	)
	connectorServiceBigQueryListTablesHandler := connect_go.NewUnaryHandler(
		ConnectorServiceBigQueryListTablesProcedure,
		svc.BigQueryListTables,
		opts...,
	)
	return "/rill.runtime.v1.ConnectorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectorServiceS3ListBucketsProcedure:
			connectorServiceS3ListBucketsHandler.ServeHTTP(w, r)
		case ConnectorServiceS3ListObjectsProcedure:
			connectorServiceS3ListObjectsHandler.ServeHTTP(w, r)
		case ConnectorServiceS3GetBucketMetadataProcedure:
			connectorServiceS3GetBucketMetadataHandler.ServeHTTP(w, r)
		case ConnectorServiceS3GetCredentialsInfoProcedure:
			connectorServiceS3GetCredentialsInfoHandler.ServeHTTP(w, r)
		case ConnectorServiceGCSListBucketsProcedure:
			connectorServiceGCSListBucketsHandler.ServeHTTP(w, r)
		case ConnectorServiceGCSListObjectsProcedure:
			connectorServiceGCSListObjectsHandler.ServeHTTP(w, r)
		case ConnectorServiceGCSGetCredentialsInfoProcedure:
			connectorServiceGCSGetCredentialsInfoHandler.ServeHTTP(w, r)
		case ConnectorServiceOLAPListTablesProcedure:
			connectorServiceOLAPListTablesHandler.ServeHTTP(w, r)
		case ConnectorServiceBigQueryListDatasetsProcedure:
			connectorServiceBigQueryListDatasetsHandler.ServeHTTP(w, r)
		case ConnectorServiceBigQueryListTablesProcedure:
			connectorServiceBigQueryListTablesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectorServiceHandler struct{}

func (UnimplementedConnectorServiceHandler) S3ListBuckets(context.Context, *connect_go.Request[v1.S3ListBucketsRequest]) (*connect_go.Response[v1.S3ListBucketsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.ConnectorService.S3ListBuckets is not implemented"))
}

func (UnimplementedConnectorServiceHandler) S3ListObjects(context.Context, *connect_go.Request[v1.S3ListObjectsRequest]) (*connect_go.Response[v1.S3ListObjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.ConnectorService.S3ListObjects is not implemented"))
}

func (UnimplementedConnectorServiceHandler) S3GetBucketMetadata(context.Context, *connect_go.Request[v1.S3GetBucketMetadataRequest]) (*connect_go.Response[v1.S3GetBucketMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.ConnectorService.S3GetBucketMetadata is not implemented"))
}

func (UnimplementedConnectorServiceHandler) S3GetCredentialsInfo(context.Context, *connect_go.Request[v1.S3GetCredentialsInfoRequest]) (*connect_go.Response[v1.S3GetCredentialsInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.ConnectorService.S3GetCredentialsInfo is not implemented"))
}

func (UnimplementedConnectorServiceHandler) GCSListBuckets(context.Context, *connect_go.Request[v1.GCSListBucketsRequest]) (*connect_go.Response[v1.GCSListBucketsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.ConnectorService.GCSListBuckets is not implemented"))
}

func (UnimplementedConnectorServiceHandler) GCSListObjects(context.Context, *connect_go.Request[v1.GCSListObjectsRequest]) (*connect_go.Response[v1.GCSListObjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.ConnectorService.GCSListObjects is not implemented"))
}

func (UnimplementedConnectorServiceHandler) GCSGetCredentialsInfo(context.Context, *connect_go.Request[v1.GCSGetCredentialsInfoRequest]) (*connect_go.Response[v1.GCSGetCredentialsInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.ConnectorService.GCSGetCredentialsInfo is not implemented"))
}

func (UnimplementedConnectorServiceHandler) OLAPListTables(context.Context, *connect_go.Request[v1.OLAPListTablesRequest]) (*connect_go.Response[v1.OLAPListTablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.ConnectorService.OLAPListTables is not implemented"))
}

func (UnimplementedConnectorServiceHandler) BigQueryListDatasets(context.Context, *connect_go.Request[v1.BigQueryListDatasetsRequest]) (*connect_go.Response[v1.BigQueryListDatasetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.ConnectorService.BigQueryListDatasets is not implemented"))
}

func (UnimplementedConnectorServiceHandler) BigQueryListTables(context.Context, *connect_go.Request[v1.BigQueryListTablesRequest]) (*connect_go.Response[v1.BigQueryListTablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.ConnectorService.BigQueryListTables is not implemented"))
}
