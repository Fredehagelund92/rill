// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rill/runtime/v1/api.proto

package runtimev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/rilldata/rill/proto/gen/rill/runtime/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RuntimeServiceName is the fully-qualified name of the RuntimeService service.
	RuntimeServiceName = "rill.runtime.v1.RuntimeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RuntimeServicePingProcedure is the fully-qualified name of the RuntimeService's Ping RPC.
	RuntimeServicePingProcedure = "/rill.runtime.v1.RuntimeService/Ping"
	// RuntimeServiceListInstancesProcedure is the fully-qualified name of the RuntimeService's
	// ListInstances RPC.
	RuntimeServiceListInstancesProcedure = "/rill.runtime.v1.RuntimeService/ListInstances"
	// RuntimeServiceGetInstanceProcedure is the fully-qualified name of the RuntimeService's
	// GetInstance RPC.
	RuntimeServiceGetInstanceProcedure = "/rill.runtime.v1.RuntimeService/GetInstance"
	// RuntimeServiceCreateInstanceProcedure is the fully-qualified name of the RuntimeService's
	// CreateInstance RPC.
	RuntimeServiceCreateInstanceProcedure = "/rill.runtime.v1.RuntimeService/CreateInstance"
	// RuntimeServiceEditInstanceProcedure is the fully-qualified name of the RuntimeService's
	// EditInstance RPC.
	RuntimeServiceEditInstanceProcedure = "/rill.runtime.v1.RuntimeService/EditInstance"
	// RuntimeServiceEditInstanceVariablesProcedure is the fully-qualified name of the RuntimeService's
	// EditInstanceVariables RPC.
	RuntimeServiceEditInstanceVariablesProcedure = "/rill.runtime.v1.RuntimeService/EditInstanceVariables"
	// RuntimeServiceEditInstanceAnnotationsProcedure is the fully-qualified name of the
	// RuntimeService's EditInstanceAnnotations RPC.
	RuntimeServiceEditInstanceAnnotationsProcedure = "/rill.runtime.v1.RuntimeService/EditInstanceAnnotations"
	// RuntimeServiceDeleteInstanceProcedure is the fully-qualified name of the RuntimeService's
	// DeleteInstance RPC.
	RuntimeServiceDeleteInstanceProcedure = "/rill.runtime.v1.RuntimeService/DeleteInstance"
	// RuntimeServiceListFilesProcedure is the fully-qualified name of the RuntimeService's ListFiles
	// RPC.
	RuntimeServiceListFilesProcedure = "/rill.runtime.v1.RuntimeService/ListFiles"
	// RuntimeServiceWatchFilesProcedure is the fully-qualified name of the RuntimeService's WatchFiles
	// RPC.
	RuntimeServiceWatchFilesProcedure = "/rill.runtime.v1.RuntimeService/WatchFiles"
	// RuntimeServiceGetFileProcedure is the fully-qualified name of the RuntimeService's GetFile RPC.
	RuntimeServiceGetFileProcedure = "/rill.runtime.v1.RuntimeService/GetFile"
	// RuntimeServicePutFileProcedure is the fully-qualified name of the RuntimeService's PutFile RPC.
	RuntimeServicePutFileProcedure = "/rill.runtime.v1.RuntimeService/PutFile"
	// RuntimeServiceDeleteFileProcedure is the fully-qualified name of the RuntimeService's DeleteFile
	// RPC.
	RuntimeServiceDeleteFileProcedure = "/rill.runtime.v1.RuntimeService/DeleteFile"
	// RuntimeServiceRenameFileProcedure is the fully-qualified name of the RuntimeService's RenameFile
	// RPC.
	RuntimeServiceRenameFileProcedure = "/rill.runtime.v1.RuntimeService/RenameFile"
	// RuntimeServiceListExamplesProcedure is the fully-qualified name of the RuntimeService's
	// ListExamples RPC.
	RuntimeServiceListExamplesProcedure = "/rill.runtime.v1.RuntimeService/ListExamples"
	// RuntimeServiceUnpackExampleProcedure is the fully-qualified name of the RuntimeService's
	// UnpackExample RPC.
	RuntimeServiceUnpackExampleProcedure = "/rill.runtime.v1.RuntimeService/UnpackExample"
	// RuntimeServiceUnpackEmptyProcedure is the fully-qualified name of the RuntimeService's
	// UnpackEmpty RPC.
	RuntimeServiceUnpackEmptyProcedure = "/rill.runtime.v1.RuntimeService/UnpackEmpty"
	// RuntimeServiceGetLogsProcedure is the fully-qualified name of the RuntimeService's GetLogs RPC.
	RuntimeServiceGetLogsProcedure = "/rill.runtime.v1.RuntimeService/GetLogs"
	// RuntimeServiceWatchLogsProcedure is the fully-qualified name of the RuntimeService's WatchLogs
	// RPC.
	RuntimeServiceWatchLogsProcedure = "/rill.runtime.v1.RuntimeService/WatchLogs"
	// RuntimeServiceListResourcesProcedure is the fully-qualified name of the RuntimeService's
	// ListResources RPC.
	RuntimeServiceListResourcesProcedure = "/rill.runtime.v1.RuntimeService/ListResources"
	// RuntimeServiceWatchResourcesProcedure is the fully-qualified name of the RuntimeService's
	// WatchResources RPC.
	RuntimeServiceWatchResourcesProcedure = "/rill.runtime.v1.RuntimeService/WatchResources"
	// RuntimeServiceGetResourceProcedure is the fully-qualified name of the RuntimeService's
	// GetResource RPC.
	RuntimeServiceGetResourceProcedure = "/rill.runtime.v1.RuntimeService/GetResource"
	// RuntimeServiceCreateTriggerProcedure is the fully-qualified name of the RuntimeService's
	// CreateTrigger RPC.
	RuntimeServiceCreateTriggerProcedure = "/rill.runtime.v1.RuntimeService/CreateTrigger"
	// RuntimeServiceListCatalogEntriesProcedure is the fully-qualified name of the RuntimeService's
	// ListCatalogEntries RPC.
	RuntimeServiceListCatalogEntriesProcedure = "/rill.runtime.v1.RuntimeService/ListCatalogEntries"
	// RuntimeServiceGetCatalogEntryProcedure is the fully-qualified name of the RuntimeService's
	// GetCatalogEntry RPC.
	RuntimeServiceGetCatalogEntryProcedure = "/rill.runtime.v1.RuntimeService/GetCatalogEntry"
	// RuntimeServiceTriggerRefreshProcedure is the fully-qualified name of the RuntimeService's
	// TriggerRefresh RPC.
	RuntimeServiceTriggerRefreshProcedure = "/rill.runtime.v1.RuntimeService/TriggerRefresh"
	// RuntimeServiceTriggerSyncProcedure is the fully-qualified name of the RuntimeService's
	// TriggerSync RPC.
	RuntimeServiceTriggerSyncProcedure = "/rill.runtime.v1.RuntimeService/TriggerSync"
	// RuntimeServiceReconcileProcedure is the fully-qualified name of the RuntimeService's Reconcile
	// RPC.
	RuntimeServiceReconcileProcedure = "/rill.runtime.v1.RuntimeService/Reconcile"
	// RuntimeServicePutFileAndReconcileProcedure is the fully-qualified name of the RuntimeService's
	// PutFileAndReconcile RPC.
	RuntimeServicePutFileAndReconcileProcedure = "/rill.runtime.v1.RuntimeService/PutFileAndReconcile"
	// RuntimeServiceDeleteFileAndReconcileProcedure is the fully-qualified name of the RuntimeService's
	// DeleteFileAndReconcile RPC.
	RuntimeServiceDeleteFileAndReconcileProcedure = "/rill.runtime.v1.RuntimeService/DeleteFileAndReconcile"
	// RuntimeServiceRenameFileAndReconcileProcedure is the fully-qualified name of the RuntimeService's
	// RenameFileAndReconcile RPC.
	RuntimeServiceRenameFileAndReconcileProcedure = "/rill.runtime.v1.RuntimeService/RenameFileAndReconcile"
	// RuntimeServiceRefreshAndReconcileProcedure is the fully-qualified name of the RuntimeService's
	// RefreshAndReconcile RPC.
	RuntimeServiceRefreshAndReconcileProcedure = "/rill.runtime.v1.RuntimeService/RefreshAndReconcile"
	// RuntimeServiceListConnectorsProcedure is the fully-qualified name of the RuntimeService's
	// ListConnectors RPC.
	RuntimeServiceListConnectorsProcedure = "/rill.runtime.v1.RuntimeService/ListConnectors"
)

// RuntimeServiceClient is a client for the rill.runtime.v1.RuntimeService service.
type RuntimeServiceClient interface {
	// Ping returns information about the runtime
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// ListInstances lists all the instances currently managed by the runtime
	ListInstances(context.Context, *connect_go.Request[v1.ListInstancesRequest]) (*connect_go.Response[v1.ListInstancesResponse], error)
	// GetInstance returns information about a specific instance
	GetInstance(context.Context, *connect_go.Request[v1.GetInstanceRequest]) (*connect_go.Response[v1.GetInstanceResponse], error)
	// CreateInstance creates a new instance
	CreateInstance(context.Context, *connect_go.Request[v1.CreateInstanceRequest]) (*connect_go.Response[v1.CreateInstanceResponse], error)
	// EditInstance edits an existing instance
	EditInstance(context.Context, *connect_go.Request[v1.EditInstanceRequest]) (*connect_go.Response[v1.EditInstanceResponse], error)
	// EditInstanceVariables edits the instance variable
	EditInstanceVariables(context.Context, *connect_go.Request[v1.EditInstanceVariablesRequest]) (*connect_go.Response[v1.EditInstanceVariablesResponse], error)
	// EditInstanceAnnotations edits the instance annotations
	EditInstanceAnnotations(context.Context, *connect_go.Request[v1.EditInstanceAnnotationsRequest]) (*connect_go.Response[v1.EditInstanceAnnotationsResponse], error)
	// DeleteInstance deletes an instance
	DeleteInstance(context.Context, *connect_go.Request[v1.DeleteInstanceRequest]) (*connect_go.Response[v1.DeleteInstanceResponse], error)
	// ListFiles lists all the files matching a glob in a repo.
	// The files are sorted by their full path.
	ListFiles(context.Context, *connect_go.Request[v1.ListFilesRequest]) (*connect_go.Response[v1.ListFilesResponse], error)
	// WatchFiles streams repo file update events. It is not supported on all backends.
	WatchFiles(context.Context, *connect_go.Request[v1.WatchFilesRequest]) (*connect_go.ServerStreamForClient[v1.WatchFilesResponse], error)
	// GetFile returns the contents of a specific file in a repo.
	GetFile(context.Context, *connect_go.Request[v1.GetFileRequest]) (*connect_go.Response[v1.GetFileResponse], error)
	// PutFile creates or updates a file in a repo
	PutFile(context.Context, *connect_go.Request[v1.PutFileRequest]) (*connect_go.Response[v1.PutFileResponse], error)
	// DeleteFile deletes a file from a repo
	DeleteFile(context.Context, *connect_go.Request[v1.DeleteFileRequest]) (*connect_go.Response[v1.DeleteFileResponse], error)
	// RenameFile renames a file in a repo
	RenameFile(context.Context, *connect_go.Request[v1.RenameFileRequest]) (*connect_go.Response[v1.RenameFileResponse], error)
	// ListExamples lists all the examples embedded into binary
	ListExamples(context.Context, *connect_go.Request[v1.ListExamplesRequest]) (*connect_go.Response[v1.ListExamplesResponse], error)
	// UnpackExample unpacks an example project
	UnpackExample(context.Context, *connect_go.Request[v1.UnpackExampleRequest]) (*connect_go.Response[v1.UnpackExampleResponse], error)
	// UnpackEmpty unpacks an empty project
	UnpackEmpty(context.Context, *connect_go.Request[v1.UnpackEmptyRequest]) (*connect_go.Response[v1.UnpackEmptyResponse], error)
	// GetLogs returns recent logs from a controller
	GetLogs(context.Context, *connect_go.Request[v1.GetLogsRequest]) (*connect_go.Response[v1.GetLogsResponse], error)
	// WatchLogs streams new logs emitted from a controller
	WatchLogs(context.Context, *connect_go.Request[v1.WatchLogsRequest]) (*connect_go.ServerStreamForClient[v1.WatchLogsResponse], error)
	// ListResources lists the resources stored in the catalog
	ListResources(context.Context, *connect_go.Request[v1.ListResourcesRequest]) (*connect_go.Response[v1.ListResourcesResponse], error)
	// WatchResources streams updates to catalog resources (including creation and deletion events)
	WatchResources(context.Context, *connect_go.Request[v1.WatchResourcesRequest]) (*connect_go.ServerStreamForClient[v1.WatchResourcesResponse], error)
	// GetResource looks up a specific catalog resource
	GetResource(context.Context, *connect_go.Request[v1.GetResourceRequest]) (*connect_go.Response[v1.GetResourceResponse], error)
	// CreateTrigger creates a trigger in the catalog.
	// Triggers are ephemeral resources that will be cleaned up by the controller.
	CreateTrigger(context.Context, *connect_go.Request[v1.CreateTriggerRequest]) (*connect_go.Response[v1.CreateTriggerResponse], error)
	// ListCatalogEntries lists all the entries registered in an instance's catalog (like tables, sources or metrics views)
	ListCatalogEntries(context.Context, *connect_go.Request[v1.ListCatalogEntriesRequest]) (*connect_go.Response[v1.ListCatalogEntriesResponse], error)
	// GetCatalogEntry returns information about a specific entry in the catalog
	GetCatalogEntry(context.Context, *connect_go.Request[v1.GetCatalogEntryRequest]) (*connect_go.Response[v1.GetCatalogEntryResponse], error)
	// TriggerRefresh triggers a refresh of a refreshable catalog object.
	// It currently only supports sources (which will be re-ingested), but will also support materialized models in the future.
	// It does not respond until the refresh has completed (will move to async jobs when the task scheduler is in place).
	TriggerRefresh(context.Context, *connect_go.Request[v1.TriggerRefreshRequest]) (*connect_go.Response[v1.TriggerRefreshResponse], error)
	// TriggerSync syncronizes the instance's catalog with the underlying OLAP's information schema.
	// If the instance has exposed=true, tables found in the information schema will be added to the catalog.
	TriggerSync(context.Context, *connect_go.Request[v1.TriggerSyncRequest]) (*connect_go.Response[v1.TriggerSyncResponse], error)
	// Reconcile applies a full set of artifacts from a repo to the catalog and infra.
	// It attempts to infer a minimal number of migrations to apply to reconcile the current state with
	// the desired state expressed in the artifacts. Any existing objects not described in the submitted
	// artifacts will be deleted.
	Reconcile(context.Context, *connect_go.Request[v1.ReconcileRequest]) (*connect_go.Response[v1.ReconcileResponse], error)
	// PutFileAndReconcile combines PutFile and Reconcile in a single endpoint to reduce latency.
	// It is equivalent to calling the two RPCs sequentially.
	PutFileAndReconcile(context.Context, *connect_go.Request[v1.PutFileAndReconcileRequest]) (*connect_go.Response[v1.PutFileAndReconcileResponse], error)
	// DeleteFileAndReconcile combines RenameFile and Reconcile in a single endpoint to reduce latency.
	DeleteFileAndReconcile(context.Context, *connect_go.Request[v1.DeleteFileAndReconcileRequest]) (*connect_go.Response[v1.DeleteFileAndReconcileResponse], error)
	// RenameFileAndReconcile combines RenameFile and Reconcile in a single endpoint to reduce latency.
	RenameFileAndReconcile(context.Context, *connect_go.Request[v1.RenameFileAndReconcileRequest]) (*connect_go.Response[v1.RenameFileAndReconcileResponse], error)
	RefreshAndReconcile(context.Context, *connect_go.Request[v1.RefreshAndReconcileRequest]) (*connect_go.Response[v1.RefreshAndReconcileResponse], error)
	// ListConnectors returns a description of all the connectors implemented in the runtime,
	// including their schema and validation rules
	ListConnectors(context.Context, *connect_go.Request[v1.ListConnectorsRequest]) (*connect_go.Response[v1.ListConnectorsResponse], error)
}

// NewRuntimeServiceClient constructs a client for the rill.runtime.v1.RuntimeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRuntimeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RuntimeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runtimeServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+RuntimeServicePingProcedure,
			opts...,
		),
		listInstances: connect_go.NewClient[v1.ListInstancesRequest, v1.ListInstancesResponse](
			httpClient,
			baseURL+RuntimeServiceListInstancesProcedure,
			opts...,
		),
		getInstance: connect_go.NewClient[v1.GetInstanceRequest, v1.GetInstanceResponse](
			httpClient,
			baseURL+RuntimeServiceGetInstanceProcedure,
			opts...,
		),
		createInstance: connect_go.NewClient[v1.CreateInstanceRequest, v1.CreateInstanceResponse](
			httpClient,
			baseURL+RuntimeServiceCreateInstanceProcedure,
			opts...,
		),
		editInstance: connect_go.NewClient[v1.EditInstanceRequest, v1.EditInstanceResponse](
			httpClient,
			baseURL+RuntimeServiceEditInstanceProcedure,
			opts...,
		),
		editInstanceVariables: connect_go.NewClient[v1.EditInstanceVariablesRequest, v1.EditInstanceVariablesResponse](
			httpClient,
			baseURL+RuntimeServiceEditInstanceVariablesProcedure,
			opts...,
		),
		editInstanceAnnotations: connect_go.NewClient[v1.EditInstanceAnnotationsRequest, v1.EditInstanceAnnotationsResponse](
			httpClient,
			baseURL+RuntimeServiceEditInstanceAnnotationsProcedure,
			opts...,
		),
		deleteInstance: connect_go.NewClient[v1.DeleteInstanceRequest, v1.DeleteInstanceResponse](
			httpClient,
			baseURL+RuntimeServiceDeleteInstanceProcedure,
			opts...,
		),
		listFiles: connect_go.NewClient[v1.ListFilesRequest, v1.ListFilesResponse](
			httpClient,
			baseURL+RuntimeServiceListFilesProcedure,
			opts...,
		),
		watchFiles: connect_go.NewClient[v1.WatchFilesRequest, v1.WatchFilesResponse](
			httpClient,
			baseURL+RuntimeServiceWatchFilesProcedure,
			opts...,
		),
		getFile: connect_go.NewClient[v1.GetFileRequest, v1.GetFileResponse](
			httpClient,
			baseURL+RuntimeServiceGetFileProcedure,
			opts...,
		),
		putFile: connect_go.NewClient[v1.PutFileRequest, v1.PutFileResponse](
			httpClient,
			baseURL+RuntimeServicePutFileProcedure,
			opts...,
		),
		deleteFile: connect_go.NewClient[v1.DeleteFileRequest, v1.DeleteFileResponse](
			httpClient,
			baseURL+RuntimeServiceDeleteFileProcedure,
			opts...,
		),
		renameFile: connect_go.NewClient[v1.RenameFileRequest, v1.RenameFileResponse](
			httpClient,
			baseURL+RuntimeServiceRenameFileProcedure,
			opts...,
		),
		listExamples: connect_go.NewClient[v1.ListExamplesRequest, v1.ListExamplesResponse](
			httpClient,
			baseURL+RuntimeServiceListExamplesProcedure,
			opts...,
		),
		unpackExample: connect_go.NewClient[v1.UnpackExampleRequest, v1.UnpackExampleResponse](
			httpClient,
			baseURL+RuntimeServiceUnpackExampleProcedure,
			opts...,
		),
		unpackEmpty: connect_go.NewClient[v1.UnpackEmptyRequest, v1.UnpackEmptyResponse](
			httpClient,
			baseURL+RuntimeServiceUnpackEmptyProcedure,
			opts...,
		),
		getLogs: connect_go.NewClient[v1.GetLogsRequest, v1.GetLogsResponse](
			httpClient,
			baseURL+RuntimeServiceGetLogsProcedure,
			opts...,
		),
		watchLogs: connect_go.NewClient[v1.WatchLogsRequest, v1.WatchLogsResponse](
			httpClient,
			baseURL+RuntimeServiceWatchLogsProcedure,
			opts...,
		),
		listResources: connect_go.NewClient[v1.ListResourcesRequest, v1.ListResourcesResponse](
			httpClient,
			baseURL+RuntimeServiceListResourcesProcedure,
			opts...,
		),
		watchResources: connect_go.NewClient[v1.WatchResourcesRequest, v1.WatchResourcesResponse](
			httpClient,
			baseURL+RuntimeServiceWatchResourcesProcedure,
			opts...,
		),
		getResource: connect_go.NewClient[v1.GetResourceRequest, v1.GetResourceResponse](
			httpClient,
			baseURL+RuntimeServiceGetResourceProcedure,
			opts...,
		),
		createTrigger: connect_go.NewClient[v1.CreateTriggerRequest, v1.CreateTriggerResponse](
			httpClient,
			baseURL+RuntimeServiceCreateTriggerProcedure,
			opts...,
		),
		listCatalogEntries: connect_go.NewClient[v1.ListCatalogEntriesRequest, v1.ListCatalogEntriesResponse](
			httpClient,
			baseURL+RuntimeServiceListCatalogEntriesProcedure,
			opts...,
		),
		getCatalogEntry: connect_go.NewClient[v1.GetCatalogEntryRequest, v1.GetCatalogEntryResponse](
			httpClient,
			baseURL+RuntimeServiceGetCatalogEntryProcedure,
			opts...,
		),
		triggerRefresh: connect_go.NewClient[v1.TriggerRefreshRequest, v1.TriggerRefreshResponse](
			httpClient,
			baseURL+RuntimeServiceTriggerRefreshProcedure,
			opts...,
		),
		triggerSync: connect_go.NewClient[v1.TriggerSyncRequest, v1.TriggerSyncResponse](
			httpClient,
			baseURL+RuntimeServiceTriggerSyncProcedure,
			opts...,
		),
		reconcile: connect_go.NewClient[v1.ReconcileRequest, v1.ReconcileResponse](
			httpClient,
			baseURL+RuntimeServiceReconcileProcedure,
			opts...,
		),
		putFileAndReconcile: connect_go.NewClient[v1.PutFileAndReconcileRequest, v1.PutFileAndReconcileResponse](
			httpClient,
			baseURL+RuntimeServicePutFileAndReconcileProcedure,
			opts...,
		),
		deleteFileAndReconcile: connect_go.NewClient[v1.DeleteFileAndReconcileRequest, v1.DeleteFileAndReconcileResponse](
			httpClient,
			baseURL+RuntimeServiceDeleteFileAndReconcileProcedure,
			opts...,
		),
		renameFileAndReconcile: connect_go.NewClient[v1.RenameFileAndReconcileRequest, v1.RenameFileAndReconcileResponse](
			httpClient,
			baseURL+RuntimeServiceRenameFileAndReconcileProcedure,
			opts...,
		),
		refreshAndReconcile: connect_go.NewClient[v1.RefreshAndReconcileRequest, v1.RefreshAndReconcileResponse](
			httpClient,
			baseURL+RuntimeServiceRefreshAndReconcileProcedure,
			opts...,
		),
		listConnectors: connect_go.NewClient[v1.ListConnectorsRequest, v1.ListConnectorsResponse](
			httpClient,
			baseURL+RuntimeServiceListConnectorsProcedure,
			opts...,
		),
	}
}

// runtimeServiceClient implements RuntimeServiceClient.
type runtimeServiceClient struct {
	ping                    *connect_go.Client[v1.PingRequest, v1.PingResponse]
	listInstances           *connect_go.Client[v1.ListInstancesRequest, v1.ListInstancesResponse]
	getInstance             *connect_go.Client[v1.GetInstanceRequest, v1.GetInstanceResponse]
	createInstance          *connect_go.Client[v1.CreateInstanceRequest, v1.CreateInstanceResponse]
	editInstance            *connect_go.Client[v1.EditInstanceRequest, v1.EditInstanceResponse]
	editInstanceVariables   *connect_go.Client[v1.EditInstanceVariablesRequest, v1.EditInstanceVariablesResponse]
	editInstanceAnnotations *connect_go.Client[v1.EditInstanceAnnotationsRequest, v1.EditInstanceAnnotationsResponse]
	deleteInstance          *connect_go.Client[v1.DeleteInstanceRequest, v1.DeleteInstanceResponse]
	listFiles               *connect_go.Client[v1.ListFilesRequest, v1.ListFilesResponse]
	watchFiles              *connect_go.Client[v1.WatchFilesRequest, v1.WatchFilesResponse]
	getFile                 *connect_go.Client[v1.GetFileRequest, v1.GetFileResponse]
	putFile                 *connect_go.Client[v1.PutFileRequest, v1.PutFileResponse]
	deleteFile              *connect_go.Client[v1.DeleteFileRequest, v1.DeleteFileResponse]
	renameFile              *connect_go.Client[v1.RenameFileRequest, v1.RenameFileResponse]
	listExamples            *connect_go.Client[v1.ListExamplesRequest, v1.ListExamplesResponse]
	unpackExample           *connect_go.Client[v1.UnpackExampleRequest, v1.UnpackExampleResponse]
	unpackEmpty             *connect_go.Client[v1.UnpackEmptyRequest, v1.UnpackEmptyResponse]
	getLogs                 *connect_go.Client[v1.GetLogsRequest, v1.GetLogsResponse]
	watchLogs               *connect_go.Client[v1.WatchLogsRequest, v1.WatchLogsResponse]
	listResources           *connect_go.Client[v1.ListResourcesRequest, v1.ListResourcesResponse]
	watchResources          *connect_go.Client[v1.WatchResourcesRequest, v1.WatchResourcesResponse]
	getResource             *connect_go.Client[v1.GetResourceRequest, v1.GetResourceResponse]
	createTrigger           *connect_go.Client[v1.CreateTriggerRequest, v1.CreateTriggerResponse]
	listCatalogEntries      *connect_go.Client[v1.ListCatalogEntriesRequest, v1.ListCatalogEntriesResponse]
	getCatalogEntry         *connect_go.Client[v1.GetCatalogEntryRequest, v1.GetCatalogEntryResponse]
	triggerRefresh          *connect_go.Client[v1.TriggerRefreshRequest, v1.TriggerRefreshResponse]
	triggerSync             *connect_go.Client[v1.TriggerSyncRequest, v1.TriggerSyncResponse]
	reconcile               *connect_go.Client[v1.ReconcileRequest, v1.ReconcileResponse]
	putFileAndReconcile     *connect_go.Client[v1.PutFileAndReconcileRequest, v1.PutFileAndReconcileResponse]
	deleteFileAndReconcile  *connect_go.Client[v1.DeleteFileAndReconcileRequest, v1.DeleteFileAndReconcileResponse]
	renameFileAndReconcile  *connect_go.Client[v1.RenameFileAndReconcileRequest, v1.RenameFileAndReconcileResponse]
	refreshAndReconcile     *connect_go.Client[v1.RefreshAndReconcileRequest, v1.RefreshAndReconcileResponse]
	listConnectors          *connect_go.Client[v1.ListConnectorsRequest, v1.ListConnectorsResponse]
}

// Ping calls rill.runtime.v1.RuntimeService.Ping.
func (c *runtimeServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ListInstances calls rill.runtime.v1.RuntimeService.ListInstances.
func (c *runtimeServiceClient) ListInstances(ctx context.Context, req *connect_go.Request[v1.ListInstancesRequest]) (*connect_go.Response[v1.ListInstancesResponse], error) {
	return c.listInstances.CallUnary(ctx, req)
}

// GetInstance calls rill.runtime.v1.RuntimeService.GetInstance.
func (c *runtimeServiceClient) GetInstance(ctx context.Context, req *connect_go.Request[v1.GetInstanceRequest]) (*connect_go.Response[v1.GetInstanceResponse], error) {
	return c.getInstance.CallUnary(ctx, req)
}

// CreateInstance calls rill.runtime.v1.RuntimeService.CreateInstance.
func (c *runtimeServiceClient) CreateInstance(ctx context.Context, req *connect_go.Request[v1.CreateInstanceRequest]) (*connect_go.Response[v1.CreateInstanceResponse], error) {
	return c.createInstance.CallUnary(ctx, req)
}

// EditInstance calls rill.runtime.v1.RuntimeService.EditInstance.
func (c *runtimeServiceClient) EditInstance(ctx context.Context, req *connect_go.Request[v1.EditInstanceRequest]) (*connect_go.Response[v1.EditInstanceResponse], error) {
	return c.editInstance.CallUnary(ctx, req)
}

// EditInstanceVariables calls rill.runtime.v1.RuntimeService.EditInstanceVariables.
func (c *runtimeServiceClient) EditInstanceVariables(ctx context.Context, req *connect_go.Request[v1.EditInstanceVariablesRequest]) (*connect_go.Response[v1.EditInstanceVariablesResponse], error) {
	return c.editInstanceVariables.CallUnary(ctx, req)
}

// EditInstanceAnnotations calls rill.runtime.v1.RuntimeService.EditInstanceAnnotations.
func (c *runtimeServiceClient) EditInstanceAnnotations(ctx context.Context, req *connect_go.Request[v1.EditInstanceAnnotationsRequest]) (*connect_go.Response[v1.EditInstanceAnnotationsResponse], error) {
	return c.editInstanceAnnotations.CallUnary(ctx, req)
}

// DeleteInstance calls rill.runtime.v1.RuntimeService.DeleteInstance.
func (c *runtimeServiceClient) DeleteInstance(ctx context.Context, req *connect_go.Request[v1.DeleteInstanceRequest]) (*connect_go.Response[v1.DeleteInstanceResponse], error) {
	return c.deleteInstance.CallUnary(ctx, req)
}

// ListFiles calls rill.runtime.v1.RuntimeService.ListFiles.
func (c *runtimeServiceClient) ListFiles(ctx context.Context, req *connect_go.Request[v1.ListFilesRequest]) (*connect_go.Response[v1.ListFilesResponse], error) {
	return c.listFiles.CallUnary(ctx, req)
}

// WatchFiles calls rill.runtime.v1.RuntimeService.WatchFiles.
func (c *runtimeServiceClient) WatchFiles(ctx context.Context, req *connect_go.Request[v1.WatchFilesRequest]) (*connect_go.ServerStreamForClient[v1.WatchFilesResponse], error) {
	return c.watchFiles.CallServerStream(ctx, req)
}

// GetFile calls rill.runtime.v1.RuntimeService.GetFile.
func (c *runtimeServiceClient) GetFile(ctx context.Context, req *connect_go.Request[v1.GetFileRequest]) (*connect_go.Response[v1.GetFileResponse], error) {
	return c.getFile.CallUnary(ctx, req)
}

// PutFile calls rill.runtime.v1.RuntimeService.PutFile.
func (c *runtimeServiceClient) PutFile(ctx context.Context, req *connect_go.Request[v1.PutFileRequest]) (*connect_go.Response[v1.PutFileResponse], error) {
	return c.putFile.CallUnary(ctx, req)
}

// DeleteFile calls rill.runtime.v1.RuntimeService.DeleteFile.
func (c *runtimeServiceClient) DeleteFile(ctx context.Context, req *connect_go.Request[v1.DeleteFileRequest]) (*connect_go.Response[v1.DeleteFileResponse], error) {
	return c.deleteFile.CallUnary(ctx, req)
}

// RenameFile calls rill.runtime.v1.RuntimeService.RenameFile.
func (c *runtimeServiceClient) RenameFile(ctx context.Context, req *connect_go.Request[v1.RenameFileRequest]) (*connect_go.Response[v1.RenameFileResponse], error) {
	return c.renameFile.CallUnary(ctx, req)
}

// ListExamples calls rill.runtime.v1.RuntimeService.ListExamples.
func (c *runtimeServiceClient) ListExamples(ctx context.Context, req *connect_go.Request[v1.ListExamplesRequest]) (*connect_go.Response[v1.ListExamplesResponse], error) {
	return c.listExamples.CallUnary(ctx, req)
}

// UnpackExample calls rill.runtime.v1.RuntimeService.UnpackExample.
func (c *runtimeServiceClient) UnpackExample(ctx context.Context, req *connect_go.Request[v1.UnpackExampleRequest]) (*connect_go.Response[v1.UnpackExampleResponse], error) {
	return c.unpackExample.CallUnary(ctx, req)
}

// UnpackEmpty calls rill.runtime.v1.RuntimeService.UnpackEmpty.
func (c *runtimeServiceClient) UnpackEmpty(ctx context.Context, req *connect_go.Request[v1.UnpackEmptyRequest]) (*connect_go.Response[v1.UnpackEmptyResponse], error) {
	return c.unpackEmpty.CallUnary(ctx, req)
}

// GetLogs calls rill.runtime.v1.RuntimeService.GetLogs.
func (c *runtimeServiceClient) GetLogs(ctx context.Context, req *connect_go.Request[v1.GetLogsRequest]) (*connect_go.Response[v1.GetLogsResponse], error) {
	return c.getLogs.CallUnary(ctx, req)
}

// WatchLogs calls rill.runtime.v1.RuntimeService.WatchLogs.
func (c *runtimeServiceClient) WatchLogs(ctx context.Context, req *connect_go.Request[v1.WatchLogsRequest]) (*connect_go.ServerStreamForClient[v1.WatchLogsResponse], error) {
	return c.watchLogs.CallServerStream(ctx, req)
}

// ListResources calls rill.runtime.v1.RuntimeService.ListResources.
func (c *runtimeServiceClient) ListResources(ctx context.Context, req *connect_go.Request[v1.ListResourcesRequest]) (*connect_go.Response[v1.ListResourcesResponse], error) {
	return c.listResources.CallUnary(ctx, req)
}

// WatchResources calls rill.runtime.v1.RuntimeService.WatchResources.
func (c *runtimeServiceClient) WatchResources(ctx context.Context, req *connect_go.Request[v1.WatchResourcesRequest]) (*connect_go.ServerStreamForClient[v1.WatchResourcesResponse], error) {
	return c.watchResources.CallServerStream(ctx, req)
}

// GetResource calls rill.runtime.v1.RuntimeService.GetResource.
func (c *runtimeServiceClient) GetResource(ctx context.Context, req *connect_go.Request[v1.GetResourceRequest]) (*connect_go.Response[v1.GetResourceResponse], error) {
	return c.getResource.CallUnary(ctx, req)
}

// CreateTrigger calls rill.runtime.v1.RuntimeService.CreateTrigger.
func (c *runtimeServiceClient) CreateTrigger(ctx context.Context, req *connect_go.Request[v1.CreateTriggerRequest]) (*connect_go.Response[v1.CreateTriggerResponse], error) {
	return c.createTrigger.CallUnary(ctx, req)
}

// ListCatalogEntries calls rill.runtime.v1.RuntimeService.ListCatalogEntries.
func (c *runtimeServiceClient) ListCatalogEntries(ctx context.Context, req *connect_go.Request[v1.ListCatalogEntriesRequest]) (*connect_go.Response[v1.ListCatalogEntriesResponse], error) {
	return c.listCatalogEntries.CallUnary(ctx, req)
}

// GetCatalogEntry calls rill.runtime.v1.RuntimeService.GetCatalogEntry.
func (c *runtimeServiceClient) GetCatalogEntry(ctx context.Context, req *connect_go.Request[v1.GetCatalogEntryRequest]) (*connect_go.Response[v1.GetCatalogEntryResponse], error) {
	return c.getCatalogEntry.CallUnary(ctx, req)
}

// TriggerRefresh calls rill.runtime.v1.RuntimeService.TriggerRefresh.
func (c *runtimeServiceClient) TriggerRefresh(ctx context.Context, req *connect_go.Request[v1.TriggerRefreshRequest]) (*connect_go.Response[v1.TriggerRefreshResponse], error) {
	return c.triggerRefresh.CallUnary(ctx, req)
}

// TriggerSync calls rill.runtime.v1.RuntimeService.TriggerSync.
func (c *runtimeServiceClient) TriggerSync(ctx context.Context, req *connect_go.Request[v1.TriggerSyncRequest]) (*connect_go.Response[v1.TriggerSyncResponse], error) {
	return c.triggerSync.CallUnary(ctx, req)
}

// Reconcile calls rill.runtime.v1.RuntimeService.Reconcile.
func (c *runtimeServiceClient) Reconcile(ctx context.Context, req *connect_go.Request[v1.ReconcileRequest]) (*connect_go.Response[v1.ReconcileResponse], error) {
	return c.reconcile.CallUnary(ctx, req)
}

// PutFileAndReconcile calls rill.runtime.v1.RuntimeService.PutFileAndReconcile.
func (c *runtimeServiceClient) PutFileAndReconcile(ctx context.Context, req *connect_go.Request[v1.PutFileAndReconcileRequest]) (*connect_go.Response[v1.PutFileAndReconcileResponse], error) {
	return c.putFileAndReconcile.CallUnary(ctx, req)
}

// DeleteFileAndReconcile calls rill.runtime.v1.RuntimeService.DeleteFileAndReconcile.
func (c *runtimeServiceClient) DeleteFileAndReconcile(ctx context.Context, req *connect_go.Request[v1.DeleteFileAndReconcileRequest]) (*connect_go.Response[v1.DeleteFileAndReconcileResponse], error) {
	return c.deleteFileAndReconcile.CallUnary(ctx, req)
}

// RenameFileAndReconcile calls rill.runtime.v1.RuntimeService.RenameFileAndReconcile.
func (c *runtimeServiceClient) RenameFileAndReconcile(ctx context.Context, req *connect_go.Request[v1.RenameFileAndReconcileRequest]) (*connect_go.Response[v1.RenameFileAndReconcileResponse], error) {
	return c.renameFileAndReconcile.CallUnary(ctx, req)
}

// RefreshAndReconcile calls rill.runtime.v1.RuntimeService.RefreshAndReconcile.
func (c *runtimeServiceClient) RefreshAndReconcile(ctx context.Context, req *connect_go.Request[v1.RefreshAndReconcileRequest]) (*connect_go.Response[v1.RefreshAndReconcileResponse], error) {
	return c.refreshAndReconcile.CallUnary(ctx, req)
}

// ListConnectors calls rill.runtime.v1.RuntimeService.ListConnectors.
func (c *runtimeServiceClient) ListConnectors(ctx context.Context, req *connect_go.Request[v1.ListConnectorsRequest]) (*connect_go.Response[v1.ListConnectorsResponse], error) {
	return c.listConnectors.CallUnary(ctx, req)
}

// RuntimeServiceHandler is an implementation of the rill.runtime.v1.RuntimeService service.
type RuntimeServiceHandler interface {
	// Ping returns information about the runtime
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// ListInstances lists all the instances currently managed by the runtime
	ListInstances(context.Context, *connect_go.Request[v1.ListInstancesRequest]) (*connect_go.Response[v1.ListInstancesResponse], error)
	// GetInstance returns information about a specific instance
	GetInstance(context.Context, *connect_go.Request[v1.GetInstanceRequest]) (*connect_go.Response[v1.GetInstanceResponse], error)
	// CreateInstance creates a new instance
	CreateInstance(context.Context, *connect_go.Request[v1.CreateInstanceRequest]) (*connect_go.Response[v1.CreateInstanceResponse], error)
	// EditInstance edits an existing instance
	EditInstance(context.Context, *connect_go.Request[v1.EditInstanceRequest]) (*connect_go.Response[v1.EditInstanceResponse], error)
	// EditInstanceVariables edits the instance variable
	EditInstanceVariables(context.Context, *connect_go.Request[v1.EditInstanceVariablesRequest]) (*connect_go.Response[v1.EditInstanceVariablesResponse], error)
	// EditInstanceAnnotations edits the instance annotations
	EditInstanceAnnotations(context.Context, *connect_go.Request[v1.EditInstanceAnnotationsRequest]) (*connect_go.Response[v1.EditInstanceAnnotationsResponse], error)
	// DeleteInstance deletes an instance
	DeleteInstance(context.Context, *connect_go.Request[v1.DeleteInstanceRequest]) (*connect_go.Response[v1.DeleteInstanceResponse], error)
	// ListFiles lists all the files matching a glob in a repo.
	// The files are sorted by their full path.
	ListFiles(context.Context, *connect_go.Request[v1.ListFilesRequest]) (*connect_go.Response[v1.ListFilesResponse], error)
	// WatchFiles streams repo file update events. It is not supported on all backends.
	WatchFiles(context.Context, *connect_go.Request[v1.WatchFilesRequest], *connect_go.ServerStream[v1.WatchFilesResponse]) error
	// GetFile returns the contents of a specific file in a repo.
	GetFile(context.Context, *connect_go.Request[v1.GetFileRequest]) (*connect_go.Response[v1.GetFileResponse], error)
	// PutFile creates or updates a file in a repo
	PutFile(context.Context, *connect_go.Request[v1.PutFileRequest]) (*connect_go.Response[v1.PutFileResponse], error)
	// DeleteFile deletes a file from a repo
	DeleteFile(context.Context, *connect_go.Request[v1.DeleteFileRequest]) (*connect_go.Response[v1.DeleteFileResponse], error)
	// RenameFile renames a file in a repo
	RenameFile(context.Context, *connect_go.Request[v1.RenameFileRequest]) (*connect_go.Response[v1.RenameFileResponse], error)
	// ListExamples lists all the examples embedded into binary
	ListExamples(context.Context, *connect_go.Request[v1.ListExamplesRequest]) (*connect_go.Response[v1.ListExamplesResponse], error)
	// UnpackExample unpacks an example project
	UnpackExample(context.Context, *connect_go.Request[v1.UnpackExampleRequest]) (*connect_go.Response[v1.UnpackExampleResponse], error)
	// UnpackEmpty unpacks an empty project
	UnpackEmpty(context.Context, *connect_go.Request[v1.UnpackEmptyRequest]) (*connect_go.Response[v1.UnpackEmptyResponse], error)
	// GetLogs returns recent logs from a controller
	GetLogs(context.Context, *connect_go.Request[v1.GetLogsRequest]) (*connect_go.Response[v1.GetLogsResponse], error)
	// WatchLogs streams new logs emitted from a controller
	WatchLogs(context.Context, *connect_go.Request[v1.WatchLogsRequest], *connect_go.ServerStream[v1.WatchLogsResponse]) error
	// ListResources lists the resources stored in the catalog
	ListResources(context.Context, *connect_go.Request[v1.ListResourcesRequest]) (*connect_go.Response[v1.ListResourcesResponse], error)
	// WatchResources streams updates to catalog resources (including creation and deletion events)
	WatchResources(context.Context, *connect_go.Request[v1.WatchResourcesRequest], *connect_go.ServerStream[v1.WatchResourcesResponse]) error
	// GetResource looks up a specific catalog resource
	GetResource(context.Context, *connect_go.Request[v1.GetResourceRequest]) (*connect_go.Response[v1.GetResourceResponse], error)
	// CreateTrigger creates a trigger in the catalog.
	// Triggers are ephemeral resources that will be cleaned up by the controller.
	CreateTrigger(context.Context, *connect_go.Request[v1.CreateTriggerRequest]) (*connect_go.Response[v1.CreateTriggerResponse], error)
	// ListCatalogEntries lists all the entries registered in an instance's catalog (like tables, sources or metrics views)
	ListCatalogEntries(context.Context, *connect_go.Request[v1.ListCatalogEntriesRequest]) (*connect_go.Response[v1.ListCatalogEntriesResponse], error)
	// GetCatalogEntry returns information about a specific entry in the catalog
	GetCatalogEntry(context.Context, *connect_go.Request[v1.GetCatalogEntryRequest]) (*connect_go.Response[v1.GetCatalogEntryResponse], error)
	// TriggerRefresh triggers a refresh of a refreshable catalog object.
	// It currently only supports sources (which will be re-ingested), but will also support materialized models in the future.
	// It does not respond until the refresh has completed (will move to async jobs when the task scheduler is in place).
	TriggerRefresh(context.Context, *connect_go.Request[v1.TriggerRefreshRequest]) (*connect_go.Response[v1.TriggerRefreshResponse], error)
	// TriggerSync syncronizes the instance's catalog with the underlying OLAP's information schema.
	// If the instance has exposed=true, tables found in the information schema will be added to the catalog.
	TriggerSync(context.Context, *connect_go.Request[v1.TriggerSyncRequest]) (*connect_go.Response[v1.TriggerSyncResponse], error)
	// Reconcile applies a full set of artifacts from a repo to the catalog and infra.
	// It attempts to infer a minimal number of migrations to apply to reconcile the current state with
	// the desired state expressed in the artifacts. Any existing objects not described in the submitted
	// artifacts will be deleted.
	Reconcile(context.Context, *connect_go.Request[v1.ReconcileRequest]) (*connect_go.Response[v1.ReconcileResponse], error)
	// PutFileAndReconcile combines PutFile and Reconcile in a single endpoint to reduce latency.
	// It is equivalent to calling the two RPCs sequentially.
	PutFileAndReconcile(context.Context, *connect_go.Request[v1.PutFileAndReconcileRequest]) (*connect_go.Response[v1.PutFileAndReconcileResponse], error)
	// DeleteFileAndReconcile combines RenameFile and Reconcile in a single endpoint to reduce latency.
	DeleteFileAndReconcile(context.Context, *connect_go.Request[v1.DeleteFileAndReconcileRequest]) (*connect_go.Response[v1.DeleteFileAndReconcileResponse], error)
	// RenameFileAndReconcile combines RenameFile and Reconcile in a single endpoint to reduce latency.
	RenameFileAndReconcile(context.Context, *connect_go.Request[v1.RenameFileAndReconcileRequest]) (*connect_go.Response[v1.RenameFileAndReconcileResponse], error)
	RefreshAndReconcile(context.Context, *connect_go.Request[v1.RefreshAndReconcileRequest]) (*connect_go.Response[v1.RefreshAndReconcileResponse], error)
	// ListConnectors returns a description of all the connectors implemented in the runtime,
	// including their schema and validation rules
	ListConnectors(context.Context, *connect_go.Request[v1.ListConnectorsRequest]) (*connect_go.Response[v1.ListConnectorsResponse], error)
}

// NewRuntimeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRuntimeServiceHandler(svc RuntimeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	runtimeServicePingHandler := connect_go.NewUnaryHandler(
		RuntimeServicePingProcedure,
		svc.Ping,
		opts...,
	)
	runtimeServiceListInstancesHandler := connect_go.NewUnaryHandler(
		RuntimeServiceListInstancesProcedure,
		svc.ListInstances,
		opts...,
	)
	runtimeServiceGetInstanceHandler := connect_go.NewUnaryHandler(
		RuntimeServiceGetInstanceProcedure,
		svc.GetInstance,
		opts...,
	)
	runtimeServiceCreateInstanceHandler := connect_go.NewUnaryHandler(
		RuntimeServiceCreateInstanceProcedure,
		svc.CreateInstance,
		opts...,
	)
	runtimeServiceEditInstanceHandler := connect_go.NewUnaryHandler(
		RuntimeServiceEditInstanceProcedure,
		svc.EditInstance,
		opts...,
	)
	runtimeServiceEditInstanceVariablesHandler := connect_go.NewUnaryHandler(
		RuntimeServiceEditInstanceVariablesProcedure,
		svc.EditInstanceVariables,
		opts...,
	)
	runtimeServiceEditInstanceAnnotationsHandler := connect_go.NewUnaryHandler(
		RuntimeServiceEditInstanceAnnotationsProcedure,
		svc.EditInstanceAnnotations,
		opts...,
	)
	runtimeServiceDeleteInstanceHandler := connect_go.NewUnaryHandler(
		RuntimeServiceDeleteInstanceProcedure,
		svc.DeleteInstance,
		opts...,
	)
	runtimeServiceListFilesHandler := connect_go.NewUnaryHandler(
		RuntimeServiceListFilesProcedure,
		svc.ListFiles,
		opts...,
	)
	runtimeServiceWatchFilesHandler := connect_go.NewServerStreamHandler(
		RuntimeServiceWatchFilesProcedure,
		svc.WatchFiles,
		opts...,
	)
	runtimeServiceGetFileHandler := connect_go.NewUnaryHandler(
		RuntimeServiceGetFileProcedure,
		svc.GetFile,
		opts...,
	)
	runtimeServicePutFileHandler := connect_go.NewUnaryHandler(
		RuntimeServicePutFileProcedure,
		svc.PutFile,
		opts...,
	)
	runtimeServiceDeleteFileHandler := connect_go.NewUnaryHandler(
		RuntimeServiceDeleteFileProcedure,
		svc.DeleteFile,
		opts...,
	)
	runtimeServiceRenameFileHandler := connect_go.NewUnaryHandler(
		RuntimeServiceRenameFileProcedure,
		svc.RenameFile,
		opts...,
	)
	runtimeServiceListExamplesHandler := connect_go.NewUnaryHandler(
		RuntimeServiceListExamplesProcedure,
		svc.ListExamples,
		opts...,
	)
	runtimeServiceUnpackExampleHandler := connect_go.NewUnaryHandler(
		RuntimeServiceUnpackExampleProcedure,
		svc.UnpackExample,
		opts...,
	)
	runtimeServiceUnpackEmptyHandler := connect_go.NewUnaryHandler(
		RuntimeServiceUnpackEmptyProcedure,
		svc.UnpackEmpty,
		opts...,
	)
	runtimeServiceGetLogsHandler := connect_go.NewUnaryHandler(
		RuntimeServiceGetLogsProcedure,
		svc.GetLogs,
		opts...,
	)
	runtimeServiceWatchLogsHandler := connect_go.NewServerStreamHandler(
		RuntimeServiceWatchLogsProcedure,
		svc.WatchLogs,
		opts...,
	)
	runtimeServiceListResourcesHandler := connect_go.NewUnaryHandler(
		RuntimeServiceListResourcesProcedure,
		svc.ListResources,
		opts...,
	)
	runtimeServiceWatchResourcesHandler := connect_go.NewServerStreamHandler(
		RuntimeServiceWatchResourcesProcedure,
		svc.WatchResources,
		opts...,
	)
	runtimeServiceGetResourceHandler := connect_go.NewUnaryHandler(
		RuntimeServiceGetResourceProcedure,
		svc.GetResource,
		opts...,
	)
	runtimeServiceCreateTriggerHandler := connect_go.NewUnaryHandler(
		RuntimeServiceCreateTriggerProcedure,
		svc.CreateTrigger,
		opts...,
	)
	runtimeServiceListCatalogEntriesHandler := connect_go.NewUnaryHandler(
		RuntimeServiceListCatalogEntriesProcedure,
		svc.ListCatalogEntries,
		opts...,
	)
	runtimeServiceGetCatalogEntryHandler := connect_go.NewUnaryHandler(
		RuntimeServiceGetCatalogEntryProcedure,
		svc.GetCatalogEntry,
		opts...,
	)
	runtimeServiceTriggerRefreshHandler := connect_go.NewUnaryHandler(
		RuntimeServiceTriggerRefreshProcedure,
		svc.TriggerRefresh,
		opts...,
	)
	runtimeServiceTriggerSyncHandler := connect_go.NewUnaryHandler(
		RuntimeServiceTriggerSyncProcedure,
		svc.TriggerSync,
		opts...,
	)
	runtimeServiceReconcileHandler := connect_go.NewUnaryHandler(
		RuntimeServiceReconcileProcedure,
		svc.Reconcile,
		opts...,
	)
	runtimeServicePutFileAndReconcileHandler := connect_go.NewUnaryHandler(
		RuntimeServicePutFileAndReconcileProcedure,
		svc.PutFileAndReconcile,
		opts...,
	)
	runtimeServiceDeleteFileAndReconcileHandler := connect_go.NewUnaryHandler(
		RuntimeServiceDeleteFileAndReconcileProcedure,
		svc.DeleteFileAndReconcile,
		opts...,
	)
	runtimeServiceRenameFileAndReconcileHandler := connect_go.NewUnaryHandler(
		RuntimeServiceRenameFileAndReconcileProcedure,
		svc.RenameFileAndReconcile,
		opts...,
	)
	runtimeServiceRefreshAndReconcileHandler := connect_go.NewUnaryHandler(
		RuntimeServiceRefreshAndReconcileProcedure,
		svc.RefreshAndReconcile,
		opts...,
	)
	runtimeServiceListConnectorsHandler := connect_go.NewUnaryHandler(
		RuntimeServiceListConnectorsProcedure,
		svc.ListConnectors,
		opts...,
	)
	return "/rill.runtime.v1.RuntimeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RuntimeServicePingProcedure:
			runtimeServicePingHandler.ServeHTTP(w, r)
		case RuntimeServiceListInstancesProcedure:
			runtimeServiceListInstancesHandler.ServeHTTP(w, r)
		case RuntimeServiceGetInstanceProcedure:
			runtimeServiceGetInstanceHandler.ServeHTTP(w, r)
		case RuntimeServiceCreateInstanceProcedure:
			runtimeServiceCreateInstanceHandler.ServeHTTP(w, r)
		case RuntimeServiceEditInstanceProcedure:
			runtimeServiceEditInstanceHandler.ServeHTTP(w, r)
		case RuntimeServiceEditInstanceVariablesProcedure:
			runtimeServiceEditInstanceVariablesHandler.ServeHTTP(w, r)
		case RuntimeServiceEditInstanceAnnotationsProcedure:
			runtimeServiceEditInstanceAnnotationsHandler.ServeHTTP(w, r)
		case RuntimeServiceDeleteInstanceProcedure:
			runtimeServiceDeleteInstanceHandler.ServeHTTP(w, r)
		case RuntimeServiceListFilesProcedure:
			runtimeServiceListFilesHandler.ServeHTTP(w, r)
		case RuntimeServiceWatchFilesProcedure:
			runtimeServiceWatchFilesHandler.ServeHTTP(w, r)
		case RuntimeServiceGetFileProcedure:
			runtimeServiceGetFileHandler.ServeHTTP(w, r)
		case RuntimeServicePutFileProcedure:
			runtimeServicePutFileHandler.ServeHTTP(w, r)
		case RuntimeServiceDeleteFileProcedure:
			runtimeServiceDeleteFileHandler.ServeHTTP(w, r)
		case RuntimeServiceRenameFileProcedure:
			runtimeServiceRenameFileHandler.ServeHTTP(w, r)
		case RuntimeServiceListExamplesProcedure:
			runtimeServiceListExamplesHandler.ServeHTTP(w, r)
		case RuntimeServiceUnpackExampleProcedure:
			runtimeServiceUnpackExampleHandler.ServeHTTP(w, r)
		case RuntimeServiceUnpackEmptyProcedure:
			runtimeServiceUnpackEmptyHandler.ServeHTTP(w, r)
		case RuntimeServiceGetLogsProcedure:
			runtimeServiceGetLogsHandler.ServeHTTP(w, r)
		case RuntimeServiceWatchLogsProcedure:
			runtimeServiceWatchLogsHandler.ServeHTTP(w, r)
		case RuntimeServiceListResourcesProcedure:
			runtimeServiceListResourcesHandler.ServeHTTP(w, r)
		case RuntimeServiceWatchResourcesProcedure:
			runtimeServiceWatchResourcesHandler.ServeHTTP(w, r)
		case RuntimeServiceGetResourceProcedure:
			runtimeServiceGetResourceHandler.ServeHTTP(w, r)
		case RuntimeServiceCreateTriggerProcedure:
			runtimeServiceCreateTriggerHandler.ServeHTTP(w, r)
		case RuntimeServiceListCatalogEntriesProcedure:
			runtimeServiceListCatalogEntriesHandler.ServeHTTP(w, r)
		case RuntimeServiceGetCatalogEntryProcedure:
			runtimeServiceGetCatalogEntryHandler.ServeHTTP(w, r)
		case RuntimeServiceTriggerRefreshProcedure:
			runtimeServiceTriggerRefreshHandler.ServeHTTP(w, r)
		case RuntimeServiceTriggerSyncProcedure:
			runtimeServiceTriggerSyncHandler.ServeHTTP(w, r)
		case RuntimeServiceReconcileProcedure:
			runtimeServiceReconcileHandler.ServeHTTP(w, r)
		case RuntimeServicePutFileAndReconcileProcedure:
			runtimeServicePutFileAndReconcileHandler.ServeHTTP(w, r)
		case RuntimeServiceDeleteFileAndReconcileProcedure:
			runtimeServiceDeleteFileAndReconcileHandler.ServeHTTP(w, r)
		case RuntimeServiceRenameFileAndReconcileProcedure:
			runtimeServiceRenameFileAndReconcileHandler.ServeHTTP(w, r)
		case RuntimeServiceRefreshAndReconcileProcedure:
			runtimeServiceRefreshAndReconcileHandler.ServeHTTP(w, r)
		case RuntimeServiceListConnectorsProcedure:
			runtimeServiceListConnectorsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRuntimeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRuntimeServiceHandler struct{}

func (UnimplementedRuntimeServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.Ping is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) ListInstances(context.Context, *connect_go.Request[v1.ListInstancesRequest]) (*connect_go.Response[v1.ListInstancesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.ListInstances is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) GetInstance(context.Context, *connect_go.Request[v1.GetInstanceRequest]) (*connect_go.Response[v1.GetInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.GetInstance is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) CreateInstance(context.Context, *connect_go.Request[v1.CreateInstanceRequest]) (*connect_go.Response[v1.CreateInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.CreateInstance is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) EditInstance(context.Context, *connect_go.Request[v1.EditInstanceRequest]) (*connect_go.Response[v1.EditInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.EditInstance is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) EditInstanceVariables(context.Context, *connect_go.Request[v1.EditInstanceVariablesRequest]) (*connect_go.Response[v1.EditInstanceVariablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.EditInstanceVariables is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) EditInstanceAnnotations(context.Context, *connect_go.Request[v1.EditInstanceAnnotationsRequest]) (*connect_go.Response[v1.EditInstanceAnnotationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.EditInstanceAnnotations is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) DeleteInstance(context.Context, *connect_go.Request[v1.DeleteInstanceRequest]) (*connect_go.Response[v1.DeleteInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.DeleteInstance is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) ListFiles(context.Context, *connect_go.Request[v1.ListFilesRequest]) (*connect_go.Response[v1.ListFilesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.ListFiles is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) WatchFiles(context.Context, *connect_go.Request[v1.WatchFilesRequest], *connect_go.ServerStream[v1.WatchFilesResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.WatchFiles is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) GetFile(context.Context, *connect_go.Request[v1.GetFileRequest]) (*connect_go.Response[v1.GetFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.GetFile is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) PutFile(context.Context, *connect_go.Request[v1.PutFileRequest]) (*connect_go.Response[v1.PutFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.PutFile is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) DeleteFile(context.Context, *connect_go.Request[v1.DeleteFileRequest]) (*connect_go.Response[v1.DeleteFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.DeleteFile is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) RenameFile(context.Context, *connect_go.Request[v1.RenameFileRequest]) (*connect_go.Response[v1.RenameFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.RenameFile is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) ListExamples(context.Context, *connect_go.Request[v1.ListExamplesRequest]) (*connect_go.Response[v1.ListExamplesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.ListExamples is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) UnpackExample(context.Context, *connect_go.Request[v1.UnpackExampleRequest]) (*connect_go.Response[v1.UnpackExampleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.UnpackExample is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) UnpackEmpty(context.Context, *connect_go.Request[v1.UnpackEmptyRequest]) (*connect_go.Response[v1.UnpackEmptyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.UnpackEmpty is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) GetLogs(context.Context, *connect_go.Request[v1.GetLogsRequest]) (*connect_go.Response[v1.GetLogsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.GetLogs is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) WatchLogs(context.Context, *connect_go.Request[v1.WatchLogsRequest], *connect_go.ServerStream[v1.WatchLogsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.WatchLogs is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) ListResources(context.Context, *connect_go.Request[v1.ListResourcesRequest]) (*connect_go.Response[v1.ListResourcesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.ListResources is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) WatchResources(context.Context, *connect_go.Request[v1.WatchResourcesRequest], *connect_go.ServerStream[v1.WatchResourcesResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.WatchResources is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) GetResource(context.Context, *connect_go.Request[v1.GetResourceRequest]) (*connect_go.Response[v1.GetResourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.GetResource is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) CreateTrigger(context.Context, *connect_go.Request[v1.CreateTriggerRequest]) (*connect_go.Response[v1.CreateTriggerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.CreateTrigger is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) ListCatalogEntries(context.Context, *connect_go.Request[v1.ListCatalogEntriesRequest]) (*connect_go.Response[v1.ListCatalogEntriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.ListCatalogEntries is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) GetCatalogEntry(context.Context, *connect_go.Request[v1.GetCatalogEntryRequest]) (*connect_go.Response[v1.GetCatalogEntryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.GetCatalogEntry is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) TriggerRefresh(context.Context, *connect_go.Request[v1.TriggerRefreshRequest]) (*connect_go.Response[v1.TriggerRefreshResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.TriggerRefresh is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) TriggerSync(context.Context, *connect_go.Request[v1.TriggerSyncRequest]) (*connect_go.Response[v1.TriggerSyncResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.TriggerSync is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) Reconcile(context.Context, *connect_go.Request[v1.ReconcileRequest]) (*connect_go.Response[v1.ReconcileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.Reconcile is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) PutFileAndReconcile(context.Context, *connect_go.Request[v1.PutFileAndReconcileRequest]) (*connect_go.Response[v1.PutFileAndReconcileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.PutFileAndReconcile is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) DeleteFileAndReconcile(context.Context, *connect_go.Request[v1.DeleteFileAndReconcileRequest]) (*connect_go.Response[v1.DeleteFileAndReconcileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.DeleteFileAndReconcile is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) RenameFileAndReconcile(context.Context, *connect_go.Request[v1.RenameFileAndReconcileRequest]) (*connect_go.Response[v1.RenameFileAndReconcileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.RenameFileAndReconcile is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) RefreshAndReconcile(context.Context, *connect_go.Request[v1.RefreshAndReconcileRequest]) (*connect_go.Response[v1.RefreshAndReconcileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.RefreshAndReconcile is not implemented"))
}

func (UnimplementedRuntimeServiceHandler) ListConnectors(context.Context, *connect_go.Request[v1.ListConnectorsRequest]) (*connect_go.Response[v1.ListConnectorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.runtime.v1.RuntimeService.ListConnectors is not implemented"))
}
