// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rill/admin/v1/api.proto

package adminv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/rilldata/rill/proto/gen/rill/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "rill.admin.v1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServicePingProcedure is the fully-qualified name of the AdminService's Ping RPC.
	AdminServicePingProcedure = "/rill.admin.v1.AdminService/Ping"
	// AdminServiceListOrganizationsProcedure is the fully-qualified name of the AdminService's
	// ListOrganizations RPC.
	AdminServiceListOrganizationsProcedure = "/rill.admin.v1.AdminService/ListOrganizations"
	// AdminServiceGetOrganizationProcedure is the fully-qualified name of the AdminService's
	// GetOrganization RPC.
	AdminServiceGetOrganizationProcedure = "/rill.admin.v1.AdminService/GetOrganization"
	// AdminServiceCreateOrganizationProcedure is the fully-qualified name of the AdminService's
	// CreateOrganization RPC.
	AdminServiceCreateOrganizationProcedure = "/rill.admin.v1.AdminService/CreateOrganization"
	// AdminServiceDeleteOrganizationProcedure is the fully-qualified name of the AdminService's
	// DeleteOrganization RPC.
	AdminServiceDeleteOrganizationProcedure = "/rill.admin.v1.AdminService/DeleteOrganization"
	// AdminServiceUpdateOrganizationProcedure is the fully-qualified name of the AdminService's
	// UpdateOrganization RPC.
	AdminServiceUpdateOrganizationProcedure = "/rill.admin.v1.AdminService/UpdateOrganization"
	// AdminServiceListProjectsForOrganizationProcedure is the fully-qualified name of the
	// AdminService's ListProjectsForOrganization RPC.
	AdminServiceListProjectsForOrganizationProcedure = "/rill.admin.v1.AdminService/ListProjectsForOrganization"
	// AdminServiceGetProjectProcedure is the fully-qualified name of the AdminService's GetProject RPC.
	AdminServiceGetProjectProcedure = "/rill.admin.v1.AdminService/GetProject"
	// AdminServiceSearchProjectNamesProcedure is the fully-qualified name of the AdminService's
	// SearchProjectNames RPC.
	AdminServiceSearchProjectNamesProcedure = "/rill.admin.v1.AdminService/SearchProjectNames"
	// AdminServiceGetProjectVariablesProcedure is the fully-qualified name of the AdminService's
	// GetProjectVariables RPC.
	AdminServiceGetProjectVariablesProcedure = "/rill.admin.v1.AdminService/GetProjectVariables"
	// AdminServiceCreateProjectProcedure is the fully-qualified name of the AdminService's
	// CreateProject RPC.
	AdminServiceCreateProjectProcedure = "/rill.admin.v1.AdminService/CreateProject"
	// AdminServiceDeleteProjectProcedure is the fully-qualified name of the AdminService's
	// DeleteProject RPC.
	AdminServiceDeleteProjectProcedure = "/rill.admin.v1.AdminService/DeleteProject"
	// AdminServiceUpdateProjectProcedure is the fully-qualified name of the AdminService's
	// UpdateProject RPC.
	AdminServiceUpdateProjectProcedure = "/rill.admin.v1.AdminService/UpdateProject"
	// AdminServiceUpdateProjectVariablesProcedure is the fully-qualified name of the AdminService's
	// UpdateProjectVariables RPC.
	AdminServiceUpdateProjectVariablesProcedure = "/rill.admin.v1.AdminService/UpdateProjectVariables"
	// AdminServiceTriggerReconcileProcedure is the fully-qualified name of the AdminService's
	// TriggerReconcile RPC.
	AdminServiceTriggerReconcileProcedure = "/rill.admin.v1.AdminService/TriggerReconcile"
	// AdminServiceTriggerRefreshSourcesProcedure is the fully-qualified name of the AdminService's
	// TriggerRefreshSources RPC.
	AdminServiceTriggerRefreshSourcesProcedure = "/rill.admin.v1.AdminService/TriggerRefreshSources"
	// AdminServiceTriggerRedeployProcedure is the fully-qualified name of the AdminService's
	// TriggerRedeploy RPC.
	AdminServiceTriggerRedeployProcedure = "/rill.admin.v1.AdminService/TriggerRedeploy"
	// AdminServiceListOrganizationMembersProcedure is the fully-qualified name of the AdminService's
	// ListOrganizationMembers RPC.
	AdminServiceListOrganizationMembersProcedure = "/rill.admin.v1.AdminService/ListOrganizationMembers"
	// AdminServiceListOrganizationInvitesProcedure is the fully-qualified name of the AdminService's
	// ListOrganizationInvites RPC.
	AdminServiceListOrganizationInvitesProcedure = "/rill.admin.v1.AdminService/ListOrganizationInvites"
	// AdminServiceAddOrganizationMemberProcedure is the fully-qualified name of the AdminService's
	// AddOrganizationMember RPC.
	AdminServiceAddOrganizationMemberProcedure = "/rill.admin.v1.AdminService/AddOrganizationMember"
	// AdminServiceRemoveOrganizationMemberProcedure is the fully-qualified name of the AdminService's
	// RemoveOrganizationMember RPC.
	AdminServiceRemoveOrganizationMemberProcedure = "/rill.admin.v1.AdminService/RemoveOrganizationMember"
	// AdminServiceLeaveOrganizationProcedure is the fully-qualified name of the AdminService's
	// LeaveOrganization RPC.
	AdminServiceLeaveOrganizationProcedure = "/rill.admin.v1.AdminService/LeaveOrganization"
	// AdminServiceSetOrganizationMemberRoleProcedure is the fully-qualified name of the AdminService's
	// SetOrganizationMemberRole RPC.
	AdminServiceSetOrganizationMemberRoleProcedure = "/rill.admin.v1.AdminService/SetOrganizationMemberRole"
	// AdminServiceListProjectMembersProcedure is the fully-qualified name of the AdminService's
	// ListProjectMembers RPC.
	AdminServiceListProjectMembersProcedure = "/rill.admin.v1.AdminService/ListProjectMembers"
	// AdminServiceListProjectInvitesProcedure is the fully-qualified name of the AdminService's
	// ListProjectInvites RPC.
	AdminServiceListProjectInvitesProcedure = "/rill.admin.v1.AdminService/ListProjectInvites"
	// AdminServiceAddProjectMemberProcedure is the fully-qualified name of the AdminService's
	// AddProjectMember RPC.
	AdminServiceAddProjectMemberProcedure = "/rill.admin.v1.AdminService/AddProjectMember"
	// AdminServiceRemoveProjectMemberProcedure is the fully-qualified name of the AdminService's
	// RemoveProjectMember RPC.
	AdminServiceRemoveProjectMemberProcedure = "/rill.admin.v1.AdminService/RemoveProjectMember"
	// AdminServiceSetProjectMemberRoleProcedure is the fully-qualified name of the AdminService's
	// SetProjectMemberRole RPC.
	AdminServiceSetProjectMemberRoleProcedure = "/rill.admin.v1.AdminService/SetProjectMemberRole"
	// AdminServiceGetCurrentUserProcedure is the fully-qualified name of the AdminService's
	// GetCurrentUser RPC.
	AdminServiceGetCurrentUserProcedure = "/rill.admin.v1.AdminService/GetCurrentUser"
	// AdminServiceIssueRepresentativeAuthTokenProcedure is the fully-qualified name of the
	// AdminService's IssueRepresentativeAuthToken RPC.
	AdminServiceIssueRepresentativeAuthTokenProcedure = "/rill.admin.v1.AdminService/IssueRepresentativeAuthToken"
	// AdminServiceRevokeCurrentAuthTokenProcedure is the fully-qualified name of the AdminService's
	// RevokeCurrentAuthToken RPC.
	AdminServiceRevokeCurrentAuthTokenProcedure = "/rill.admin.v1.AdminService/RevokeCurrentAuthToken"
	// AdminServiceGetGithubRepoStatusProcedure is the fully-qualified name of the AdminService's
	// GetGithubRepoStatus RPC.
	AdminServiceGetGithubRepoStatusProcedure = "/rill.admin.v1.AdminService/GetGithubRepoStatus"
	// AdminServiceGetGitCredentialsProcedure is the fully-qualified name of the AdminService's
	// GetGitCredentials RPC.
	AdminServiceGetGitCredentialsProcedure = "/rill.admin.v1.AdminService/GetGitCredentials"
	// AdminServiceCreateWhitelistedDomainProcedure is the fully-qualified name of the AdminService's
	// CreateWhitelistedDomain RPC.
	AdminServiceCreateWhitelistedDomainProcedure = "/rill.admin.v1.AdminService/CreateWhitelistedDomain"
	// AdminServiceRemoveWhitelistedDomainProcedure is the fully-qualified name of the AdminService's
	// RemoveWhitelistedDomain RPC.
	AdminServiceRemoveWhitelistedDomainProcedure = "/rill.admin.v1.AdminService/RemoveWhitelistedDomain"
	// AdminServiceListWhitelistedDomainsProcedure is the fully-qualified name of the AdminService's
	// ListWhitelistedDomains RPC.
	AdminServiceListWhitelistedDomainsProcedure = "/rill.admin.v1.AdminService/ListWhitelistedDomains"
	// AdminServiceGetUserProcedure is the fully-qualified name of the AdminService's GetUser RPC.
	AdminServiceGetUserProcedure = "/rill.admin.v1.AdminService/GetUser"
	// AdminServiceSearchUsersProcedure is the fully-qualified name of the AdminService's SearchUsers
	// RPC.
	AdminServiceSearchUsersProcedure = "/rill.admin.v1.AdminService/SearchUsers"
	// AdminServiceListSuperusersProcedure is the fully-qualified name of the AdminService's
	// ListSuperusers RPC.
	AdminServiceListSuperusersProcedure = "/rill.admin.v1.AdminService/ListSuperusers"
	// AdminServiceSetSuperuserProcedure is the fully-qualified name of the AdminService's SetSuperuser
	// RPC.
	AdminServiceSetSuperuserProcedure = "/rill.admin.v1.AdminService/SetSuperuser"
	// AdminServiceSudoGetResourceProcedure is the fully-qualified name of the AdminService's
	// SudoGetResource RPC.
	AdminServiceSudoGetResourceProcedure = "/rill.admin.v1.AdminService/SudoGetResource"
	// AdminServiceSudoUpdateUserQuotasProcedure is the fully-qualified name of the AdminService's
	// SudoUpdateUserQuotas RPC.
	AdminServiceSudoUpdateUserQuotasProcedure = "/rill.admin.v1.AdminService/SudoUpdateUserQuotas"
	// AdminServiceSudoUpdateOrganizationQuotasProcedure is the fully-qualified name of the
	// AdminService's SudoUpdateOrganizationQuotas RPC.
	AdminServiceSudoUpdateOrganizationQuotasProcedure = "/rill.admin.v1.AdminService/SudoUpdateOrganizationQuotas"
	// AdminServiceUpdateUserPreferencesProcedure is the fully-qualified name of the AdminService's
	// UpdateUserPreferences RPC.
	AdminServiceUpdateUserPreferencesProcedure = "/rill.admin.v1.AdminService/UpdateUserPreferences"
	// AdminServiceListBookmarksProcedure is the fully-qualified name of the AdminService's
	// ListBookmarks RPC.
	AdminServiceListBookmarksProcedure = "/rill.admin.v1.AdminService/ListBookmarks"
	// AdminServiceGetBookmarkProcedure is the fully-qualified name of the AdminService's GetBookmark
	// RPC.
	AdminServiceGetBookmarkProcedure = "/rill.admin.v1.AdminService/GetBookmark"
	// AdminServiceCreateBookmarkProcedure is the fully-qualified name of the AdminService's
	// CreateBookmark RPC.
	AdminServiceCreateBookmarkProcedure = "/rill.admin.v1.AdminService/CreateBookmark"
	// AdminServiceRemoveBookmarkProcedure is the fully-qualified name of the AdminService's
	// RemoveBookmark RPC.
	AdminServiceRemoveBookmarkProcedure = "/rill.admin.v1.AdminService/RemoveBookmark"
)

// AdminServiceClient is a client for the rill.admin.v1.AdminService service.
type AdminServiceClient interface {
	// Ping returns information about the server
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// ListOrganizations lists all the organizations currently managed by the admin
	ListOrganizations(context.Context, *connect_go.Request[v1.ListOrganizationsRequest]) (*connect_go.Response[v1.ListOrganizationsResponse], error)
	// GetOrganization returns information about a specific organization
	GetOrganization(context.Context, *connect_go.Request[v1.GetOrganizationRequest]) (*connect_go.Response[v1.GetOrganizationResponse], error)
	// CreateOrganization creates a new organization
	CreateOrganization(context.Context, *connect_go.Request[v1.CreateOrganizationRequest]) (*connect_go.Response[v1.CreateOrganizationResponse], error)
	// DeleteOrganization deletes an organizations
	DeleteOrganization(context.Context, *connect_go.Request[v1.DeleteOrganizationRequest]) (*connect_go.Response[v1.DeleteOrganizationResponse], error)
	// UpdateOrganization deletes an organizations
	UpdateOrganization(context.Context, *connect_go.Request[v1.UpdateOrganizationRequest]) (*connect_go.Response[v1.UpdateOrganizationResponse], error)
	// ListProjectsForOrganization lists all the projects currently available for given organizations
	ListProjectsForOrganization(context.Context, *connect_go.Request[v1.ListProjectsForOrganizationRequest]) (*connect_go.Response[v1.ListProjectsForOrganizationResponse], error)
	// GetProject returns information about a specific project
	GetProject(context.Context, *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.GetProjectResponse], error)
	// SearchProjectNames returns project names matching the pattern
	SearchProjectNames(context.Context, *connect_go.Request[v1.SearchProjectNamesRequest]) (*connect_go.Response[v1.SearchProjectNamesResponse], error)
	// GetProjectVariables returns project variables. NOTE: Get project API doesn't return variables.
	GetProjectVariables(context.Context, *connect_go.Request[v1.GetProjectVariablesRequest]) (*connect_go.Response[v1.GetProjectVariablesResponse], error)
	// CreateProject creates a new project
	CreateProject(context.Context, *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.CreateProjectResponse], error)
	// DeleteProject deletes an project
	DeleteProject(context.Context, *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.DeleteProjectResponse], error)
	// UpdateProject updates a project
	UpdateProject(context.Context, *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.UpdateProjectResponse], error)
	// UpdateProjectVariables updates variables for a project. NOTE: Update project API doesn't update variables.
	UpdateProjectVariables(context.Context, *connect_go.Request[v1.UpdateProjectVariablesRequest]) (*connect_go.Response[v1.UpdateProjectVariablesResponse], error)
	// TriggerReconcile triggers reconcile for the project's prod deployment
	TriggerReconcile(context.Context, *connect_go.Request[v1.TriggerReconcileRequest]) (*connect_go.Response[v1.TriggerReconcileResponse], error)
	// TriggerRefreshSources refresh the source for production deployment
	TriggerRefreshSources(context.Context, *connect_go.Request[v1.TriggerRefreshSourcesRequest]) (*connect_go.Response[v1.TriggerRefreshSourcesResponse], error)
	// TriggerRedeploy creates a new deployment and teardown the old deployment for production deployment
	TriggerRedeploy(context.Context, *connect_go.Request[v1.TriggerRedeployRequest]) (*connect_go.Response[v1.TriggerRedeployResponse], error)
	// ListOrganizationMembers lists all the org members
	ListOrganizationMembers(context.Context, *connect_go.Request[v1.ListOrganizationMembersRequest]) (*connect_go.Response[v1.ListOrganizationMembersResponse], error)
	// ListOrganizationInvites lists all the org invites
	ListOrganizationInvites(context.Context, *connect_go.Request[v1.ListOrganizationInvitesRequest]) (*connect_go.Response[v1.ListOrganizationInvitesResponse], error)
	// AddOrganizationMember lists all the org members
	AddOrganizationMember(context.Context, *connect_go.Request[v1.AddOrganizationMemberRequest]) (*connect_go.Response[v1.AddOrganizationMemberResponse], error)
	// RemoveOrganizationMember removes member from the organization
	RemoveOrganizationMember(context.Context, *connect_go.Request[v1.RemoveOrganizationMemberRequest]) (*connect_go.Response[v1.RemoveOrganizationMemberResponse], error)
	// LeaveOrganization removes the current user from the organization
	LeaveOrganization(context.Context, *connect_go.Request[v1.LeaveOrganizationRequest]) (*connect_go.Response[v1.LeaveOrganizationResponse], error)
	// SetOrganizationMemberRole sets the role for the member
	SetOrganizationMemberRole(context.Context, *connect_go.Request[v1.SetOrganizationMemberRoleRequest]) (*connect_go.Response[v1.SetOrganizationMemberRoleResponse], error)
	// ListProjectMembers lists all the project members
	ListProjectMembers(context.Context, *connect_go.Request[v1.ListProjectMembersRequest]) (*connect_go.Response[v1.ListProjectMembersResponse], error)
	// ListProjectInvites lists all the project invites
	ListProjectInvites(context.Context, *connect_go.Request[v1.ListProjectInvitesRequest]) (*connect_go.Response[v1.ListProjectInvitesResponse], error)
	// AddProjectMember adds a member to the project
	AddProjectMember(context.Context, *connect_go.Request[v1.AddProjectMemberRequest]) (*connect_go.Response[v1.AddProjectMemberResponse], error)
	// RemoveProjectMember removes member from the project
	RemoveProjectMember(context.Context, *connect_go.Request[v1.RemoveProjectMemberRequest]) (*connect_go.Response[v1.RemoveProjectMemberResponse], error)
	// SetProjectMemberRole sets the role for the member
	SetProjectMemberRole(context.Context, *connect_go.Request[v1.SetProjectMemberRoleRequest]) (*connect_go.Response[v1.SetProjectMemberRoleResponse], error)
	// GetCurrentUser returns the currently authenticated user (if any)
	GetCurrentUser(context.Context, *connect_go.Request[v1.GetCurrentUserRequest]) (*connect_go.Response[v1.GetCurrentUserResponse], error)
	// IssueRepresentativeAuthToken returns the temporary token for given email
	IssueRepresentativeAuthToken(context.Context, *connect_go.Request[v1.IssueRepresentativeAuthTokenRequest]) (*connect_go.Response[v1.IssueRepresentativeAuthTokenResponse], error)
	// RevokeCurrentAuthToken revoke the current auth token
	RevokeCurrentAuthToken(context.Context, *connect_go.Request[v1.RevokeCurrentAuthTokenRequest]) (*connect_go.Response[v1.RevokeCurrentAuthTokenResponse], error)
	// GetGithubRepoRequest returns info about a Github repo based on the caller's installations.
	// If the caller has not granted access to the repository, instructions for granting access are returned.
	GetGithubRepoStatus(context.Context, *connect_go.Request[v1.GetGithubRepoStatusRequest]) (*connect_go.Response[v1.GetGithubRepoStatusResponse], error)
	// GetGitCredentials returns credentials and other details for a project's Git repository.
	GetGitCredentials(context.Context, *connect_go.Request[v1.GetGitCredentialsRequest]) (*connect_go.Response[v1.GetGitCredentialsResponse], error)
	// CreateWhitelistedDomain adds a domain to the whitelist
	CreateWhitelistedDomain(context.Context, *connect_go.Request[v1.CreateWhitelistedDomainRequest]) (*connect_go.Response[v1.CreateWhitelistedDomainResponse], error)
	// RemoveWhitelistedDomain removes a domain from the whitelist list
	RemoveWhitelistedDomain(context.Context, *connect_go.Request[v1.RemoveWhitelistedDomainRequest]) (*connect_go.Response[v1.RemoveWhitelistedDomainResponse], error)
	// ListWhitelistedDomains lists all the whitelisted domains for the organization
	ListWhitelistedDomains(context.Context, *connect_go.Request[v1.ListWhitelistedDomainsRequest]) (*connect_go.Response[v1.ListWhitelistedDomainsResponse], error)
	// GetUser returns user by email
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error)
	// GetUsersByEmail returns users by email
	SearchUsers(context.Context, *connect_go.Request[v1.SearchUsersRequest]) (*connect_go.Response[v1.SearchUsersResponse], error)
	// ListSuperusers lists all the superusers
	ListSuperusers(context.Context, *connect_go.Request[v1.ListSuperusersRequest]) (*connect_go.Response[v1.ListSuperusersResponse], error)
	// SetSuperuser adds/remove a superuser
	SetSuperuser(context.Context, *connect_go.Request[v1.SetSuperuserRequest]) (*connect_go.Response[v1.SetSuperuserResponse], error)
	// SudoGetResource returns details about a resource by ID lookup
	SudoGetResource(context.Context, *connect_go.Request[v1.SudoGetResourceRequest]) (*connect_go.Response[v1.SudoGetResourceResponse], error)
	// SudoUpdateUserQuotas update the quotas for users
	SudoUpdateUserQuotas(context.Context, *connect_go.Request[v1.SudoUpdateUserQuotasRequest]) (*connect_go.Response[v1.SudoUpdateUserQuotasResponse], error)
	// SudoUpdateOrganizationQuotas update the quotas available for orgs
	SudoUpdateOrganizationQuotas(context.Context, *connect_go.Request[v1.SudoUpdateOrganizationQuotasRequest]) (*connect_go.Response[v1.SudoUpdateOrganizationQuotasResponse], error)
	// UpdateUserPreferences updates the preferences for the user
	UpdateUserPreferences(context.Context, *connect_go.Request[v1.UpdateUserPreferencesRequest]) (*connect_go.Response[v1.UpdateUserPreferencesResponse], error)
	// ListBookmarks lists all the bookmarks for the user
	ListBookmarks(context.Context, *connect_go.Request[v1.ListBookmarksRequest]) (*connect_go.Response[v1.ListBookmarksResponse], error)
	// GetBookmark returns the bookmark for the given user for the given project
	GetBookmark(context.Context, *connect_go.Request[v1.GetBookmarkRequest]) (*connect_go.Response[v1.GetBookmarkResponse], error)
	// CreateBookmark creates a bookmark for the given user for the given project
	CreateBookmark(context.Context, *connect_go.Request[v1.CreateBookmarkRequest]) (*connect_go.Response[v1.CreateBookmarkResponse], error)
	// RemoveBookmark removes the bookmark for the given user for the given project
	RemoveBookmark(context.Context, *connect_go.Request[v1.RemoveBookmarkRequest]) (*connect_go.Response[v1.RemoveBookmarkResponse], error)
}

// NewAdminServiceClient constructs a client for the rill.admin.v1.AdminService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+AdminServicePingProcedure,
			opts...,
		),
		listOrganizations: connect_go.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+AdminServiceListOrganizationsProcedure,
			opts...,
		),
		getOrganization: connect_go.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+AdminServiceGetOrganizationProcedure,
			opts...,
		),
		createOrganization: connect_go.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+AdminServiceCreateOrganizationProcedure,
			opts...,
		),
		deleteOrganization: connect_go.NewClient[v1.DeleteOrganizationRequest, v1.DeleteOrganizationResponse](
			httpClient,
			baseURL+AdminServiceDeleteOrganizationProcedure,
			opts...,
		),
		updateOrganization: connect_go.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+AdminServiceUpdateOrganizationProcedure,
			opts...,
		),
		listProjectsForOrganization: connect_go.NewClient[v1.ListProjectsForOrganizationRequest, v1.ListProjectsForOrganizationResponse](
			httpClient,
			baseURL+AdminServiceListProjectsForOrganizationProcedure,
			opts...,
		),
		getProject: connect_go.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+AdminServiceGetProjectProcedure,
			opts...,
		),
		searchProjectNames: connect_go.NewClient[v1.SearchProjectNamesRequest, v1.SearchProjectNamesResponse](
			httpClient,
			baseURL+AdminServiceSearchProjectNamesProcedure,
			opts...,
		),
		getProjectVariables: connect_go.NewClient[v1.GetProjectVariablesRequest, v1.GetProjectVariablesResponse](
			httpClient,
			baseURL+AdminServiceGetProjectVariablesProcedure,
			opts...,
		),
		createProject: connect_go.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+AdminServiceCreateProjectProcedure,
			opts...,
		),
		deleteProject: connect_go.NewClient[v1.DeleteProjectRequest, v1.DeleteProjectResponse](
			httpClient,
			baseURL+AdminServiceDeleteProjectProcedure,
			opts...,
		),
		updateProject: connect_go.NewClient[v1.UpdateProjectRequest, v1.UpdateProjectResponse](
			httpClient,
			baseURL+AdminServiceUpdateProjectProcedure,
			opts...,
		),
		updateProjectVariables: connect_go.NewClient[v1.UpdateProjectVariablesRequest, v1.UpdateProjectVariablesResponse](
			httpClient,
			baseURL+AdminServiceUpdateProjectVariablesProcedure,
			opts...,
		),
		triggerReconcile: connect_go.NewClient[v1.TriggerReconcileRequest, v1.TriggerReconcileResponse](
			httpClient,
			baseURL+AdminServiceTriggerReconcileProcedure,
			opts...,
		),
		triggerRefreshSources: connect_go.NewClient[v1.TriggerRefreshSourcesRequest, v1.TriggerRefreshSourcesResponse](
			httpClient,
			baseURL+AdminServiceTriggerRefreshSourcesProcedure,
			opts...,
		),
		triggerRedeploy: connect_go.NewClient[v1.TriggerRedeployRequest, v1.TriggerRedeployResponse](
			httpClient,
			baseURL+AdminServiceTriggerRedeployProcedure,
			opts...,
		),
		listOrganizationMembers: connect_go.NewClient[v1.ListOrganizationMembersRequest, v1.ListOrganizationMembersResponse](
			httpClient,
			baseURL+AdminServiceListOrganizationMembersProcedure,
			opts...,
		),
		listOrganizationInvites: connect_go.NewClient[v1.ListOrganizationInvitesRequest, v1.ListOrganizationInvitesResponse](
			httpClient,
			baseURL+AdminServiceListOrganizationInvitesProcedure,
			opts...,
		),
		addOrganizationMember: connect_go.NewClient[v1.AddOrganizationMemberRequest, v1.AddOrganizationMemberResponse](
			httpClient,
			baseURL+AdminServiceAddOrganizationMemberProcedure,
			opts...,
		),
		removeOrganizationMember: connect_go.NewClient[v1.RemoveOrganizationMemberRequest, v1.RemoveOrganizationMemberResponse](
			httpClient,
			baseURL+AdminServiceRemoveOrganizationMemberProcedure,
			opts...,
		),
		leaveOrganization: connect_go.NewClient[v1.LeaveOrganizationRequest, v1.LeaveOrganizationResponse](
			httpClient,
			baseURL+AdminServiceLeaveOrganizationProcedure,
			opts...,
		),
		setOrganizationMemberRole: connect_go.NewClient[v1.SetOrganizationMemberRoleRequest, v1.SetOrganizationMemberRoleResponse](
			httpClient,
			baseURL+AdminServiceSetOrganizationMemberRoleProcedure,
			opts...,
		),
		listProjectMembers: connect_go.NewClient[v1.ListProjectMembersRequest, v1.ListProjectMembersResponse](
			httpClient,
			baseURL+AdminServiceListProjectMembersProcedure,
			opts...,
		),
		listProjectInvites: connect_go.NewClient[v1.ListProjectInvitesRequest, v1.ListProjectInvitesResponse](
			httpClient,
			baseURL+AdminServiceListProjectInvitesProcedure,
			opts...,
		),
		addProjectMember: connect_go.NewClient[v1.AddProjectMemberRequest, v1.AddProjectMemberResponse](
			httpClient,
			baseURL+AdminServiceAddProjectMemberProcedure,
			opts...,
		),
		removeProjectMember: connect_go.NewClient[v1.RemoveProjectMemberRequest, v1.RemoveProjectMemberResponse](
			httpClient,
			baseURL+AdminServiceRemoveProjectMemberProcedure,
			opts...,
		),
		setProjectMemberRole: connect_go.NewClient[v1.SetProjectMemberRoleRequest, v1.SetProjectMemberRoleResponse](
			httpClient,
			baseURL+AdminServiceSetProjectMemberRoleProcedure,
			opts...,
		),
		getCurrentUser: connect_go.NewClient[v1.GetCurrentUserRequest, v1.GetCurrentUserResponse](
			httpClient,
			baseURL+AdminServiceGetCurrentUserProcedure,
			opts...,
		),
		issueRepresentativeAuthToken: connect_go.NewClient[v1.IssueRepresentativeAuthTokenRequest, v1.IssueRepresentativeAuthTokenResponse](
			httpClient,
			baseURL+AdminServiceIssueRepresentativeAuthTokenProcedure,
			opts...,
		),
		revokeCurrentAuthToken: connect_go.NewClient[v1.RevokeCurrentAuthTokenRequest, v1.RevokeCurrentAuthTokenResponse](
			httpClient,
			baseURL+AdminServiceRevokeCurrentAuthTokenProcedure,
			opts...,
		),
		getGithubRepoStatus: connect_go.NewClient[v1.GetGithubRepoStatusRequest, v1.GetGithubRepoStatusResponse](
			httpClient,
			baseURL+AdminServiceGetGithubRepoStatusProcedure,
			opts...,
		),
		getGitCredentials: connect_go.NewClient[v1.GetGitCredentialsRequest, v1.GetGitCredentialsResponse](
			httpClient,
			baseURL+AdminServiceGetGitCredentialsProcedure,
			opts...,
		),
		createWhitelistedDomain: connect_go.NewClient[v1.CreateWhitelistedDomainRequest, v1.CreateWhitelistedDomainResponse](
			httpClient,
			baseURL+AdminServiceCreateWhitelistedDomainProcedure,
			opts...,
		),
		removeWhitelistedDomain: connect_go.NewClient[v1.RemoveWhitelistedDomainRequest, v1.RemoveWhitelistedDomainResponse](
			httpClient,
			baseURL+AdminServiceRemoveWhitelistedDomainProcedure,
			opts...,
		),
		listWhitelistedDomains: connect_go.NewClient[v1.ListWhitelistedDomainsRequest, v1.ListWhitelistedDomainsResponse](
			httpClient,
			baseURL+AdminServiceListWhitelistedDomainsProcedure,
			opts...,
		),
		getUser: connect_go.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+AdminServiceGetUserProcedure,
			opts...,
		),
		searchUsers: connect_go.NewClient[v1.SearchUsersRequest, v1.SearchUsersResponse](
			httpClient,
			baseURL+AdminServiceSearchUsersProcedure,
			opts...,
		),
		listSuperusers: connect_go.NewClient[v1.ListSuperusersRequest, v1.ListSuperusersResponse](
			httpClient,
			baseURL+AdminServiceListSuperusersProcedure,
			opts...,
		),
		setSuperuser: connect_go.NewClient[v1.SetSuperuserRequest, v1.SetSuperuserResponse](
			httpClient,
			baseURL+AdminServiceSetSuperuserProcedure,
			opts...,
		),
		sudoGetResource: connect_go.NewClient[v1.SudoGetResourceRequest, v1.SudoGetResourceResponse](
			httpClient,
			baseURL+AdminServiceSudoGetResourceProcedure,
			opts...,
		),
		sudoUpdateUserQuotas: connect_go.NewClient[v1.SudoUpdateUserQuotasRequest, v1.SudoUpdateUserQuotasResponse](
			httpClient,
			baseURL+AdminServiceSudoUpdateUserQuotasProcedure,
			opts...,
		),
		sudoUpdateOrganizationQuotas: connect_go.NewClient[v1.SudoUpdateOrganizationQuotasRequest, v1.SudoUpdateOrganizationQuotasResponse](
			httpClient,
			baseURL+AdminServiceSudoUpdateOrganizationQuotasProcedure,
			opts...,
		),
		updateUserPreferences: connect_go.NewClient[v1.UpdateUserPreferencesRequest, v1.UpdateUserPreferencesResponse](
			httpClient,
			baseURL+AdminServiceUpdateUserPreferencesProcedure,
			opts...,
		),
		listBookmarks: connect_go.NewClient[v1.ListBookmarksRequest, v1.ListBookmarksResponse](
			httpClient,
			baseURL+AdminServiceListBookmarksProcedure,
			opts...,
		),
		getBookmark: connect_go.NewClient[v1.GetBookmarkRequest, v1.GetBookmarkResponse](
			httpClient,
			baseURL+AdminServiceGetBookmarkProcedure,
			opts...,
		),
		createBookmark: connect_go.NewClient[v1.CreateBookmarkRequest, v1.CreateBookmarkResponse](
			httpClient,
			baseURL+AdminServiceCreateBookmarkProcedure,
			opts...,
		),
		removeBookmark: connect_go.NewClient[v1.RemoveBookmarkRequest, v1.RemoveBookmarkResponse](
			httpClient,
			baseURL+AdminServiceRemoveBookmarkProcedure,
			opts...,
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	ping                         *connect_go.Client[v1.PingRequest, v1.PingResponse]
	listOrganizations            *connect_go.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	getOrganization              *connect_go.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	createOrganization           *connect_go.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	deleteOrganization           *connect_go.Client[v1.DeleteOrganizationRequest, v1.DeleteOrganizationResponse]
	updateOrganization           *connect_go.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	listProjectsForOrganization  *connect_go.Client[v1.ListProjectsForOrganizationRequest, v1.ListProjectsForOrganizationResponse]
	getProject                   *connect_go.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	searchProjectNames           *connect_go.Client[v1.SearchProjectNamesRequest, v1.SearchProjectNamesResponse]
	getProjectVariables          *connect_go.Client[v1.GetProjectVariablesRequest, v1.GetProjectVariablesResponse]
	createProject                *connect_go.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
	deleteProject                *connect_go.Client[v1.DeleteProjectRequest, v1.DeleteProjectResponse]
	updateProject                *connect_go.Client[v1.UpdateProjectRequest, v1.UpdateProjectResponse]
	updateProjectVariables       *connect_go.Client[v1.UpdateProjectVariablesRequest, v1.UpdateProjectVariablesResponse]
	triggerReconcile             *connect_go.Client[v1.TriggerReconcileRequest, v1.TriggerReconcileResponse]
	triggerRefreshSources        *connect_go.Client[v1.TriggerRefreshSourcesRequest, v1.TriggerRefreshSourcesResponse]
	triggerRedeploy              *connect_go.Client[v1.TriggerRedeployRequest, v1.TriggerRedeployResponse]
	listOrganizationMembers      *connect_go.Client[v1.ListOrganizationMembersRequest, v1.ListOrganizationMembersResponse]
	listOrganizationInvites      *connect_go.Client[v1.ListOrganizationInvitesRequest, v1.ListOrganizationInvitesResponse]
	addOrganizationMember        *connect_go.Client[v1.AddOrganizationMemberRequest, v1.AddOrganizationMemberResponse]
	removeOrganizationMember     *connect_go.Client[v1.RemoveOrganizationMemberRequest, v1.RemoveOrganizationMemberResponse]
	leaveOrganization            *connect_go.Client[v1.LeaveOrganizationRequest, v1.LeaveOrganizationResponse]
	setOrganizationMemberRole    *connect_go.Client[v1.SetOrganizationMemberRoleRequest, v1.SetOrganizationMemberRoleResponse]
	listProjectMembers           *connect_go.Client[v1.ListProjectMembersRequest, v1.ListProjectMembersResponse]
	listProjectInvites           *connect_go.Client[v1.ListProjectInvitesRequest, v1.ListProjectInvitesResponse]
	addProjectMember             *connect_go.Client[v1.AddProjectMemberRequest, v1.AddProjectMemberResponse]
	removeProjectMember          *connect_go.Client[v1.RemoveProjectMemberRequest, v1.RemoveProjectMemberResponse]
	setProjectMemberRole         *connect_go.Client[v1.SetProjectMemberRoleRequest, v1.SetProjectMemberRoleResponse]
	getCurrentUser               *connect_go.Client[v1.GetCurrentUserRequest, v1.GetCurrentUserResponse]
	issueRepresentativeAuthToken *connect_go.Client[v1.IssueRepresentativeAuthTokenRequest, v1.IssueRepresentativeAuthTokenResponse]
	revokeCurrentAuthToken       *connect_go.Client[v1.RevokeCurrentAuthTokenRequest, v1.RevokeCurrentAuthTokenResponse]
	getGithubRepoStatus          *connect_go.Client[v1.GetGithubRepoStatusRequest, v1.GetGithubRepoStatusResponse]
	getGitCredentials            *connect_go.Client[v1.GetGitCredentialsRequest, v1.GetGitCredentialsResponse]
	createWhitelistedDomain      *connect_go.Client[v1.CreateWhitelistedDomainRequest, v1.CreateWhitelistedDomainResponse]
	removeWhitelistedDomain      *connect_go.Client[v1.RemoveWhitelistedDomainRequest, v1.RemoveWhitelistedDomainResponse]
	listWhitelistedDomains       *connect_go.Client[v1.ListWhitelistedDomainsRequest, v1.ListWhitelistedDomainsResponse]
	getUser                      *connect_go.Client[v1.GetUserRequest, v1.GetUserResponse]
	searchUsers                  *connect_go.Client[v1.SearchUsersRequest, v1.SearchUsersResponse]
	listSuperusers               *connect_go.Client[v1.ListSuperusersRequest, v1.ListSuperusersResponse]
	setSuperuser                 *connect_go.Client[v1.SetSuperuserRequest, v1.SetSuperuserResponse]
	sudoGetResource              *connect_go.Client[v1.SudoGetResourceRequest, v1.SudoGetResourceResponse]
	sudoUpdateUserQuotas         *connect_go.Client[v1.SudoUpdateUserQuotasRequest, v1.SudoUpdateUserQuotasResponse]
	sudoUpdateOrganizationQuotas *connect_go.Client[v1.SudoUpdateOrganizationQuotasRequest, v1.SudoUpdateOrganizationQuotasResponse]
	updateUserPreferences        *connect_go.Client[v1.UpdateUserPreferencesRequest, v1.UpdateUserPreferencesResponse]
	listBookmarks                *connect_go.Client[v1.ListBookmarksRequest, v1.ListBookmarksResponse]
	getBookmark                  *connect_go.Client[v1.GetBookmarkRequest, v1.GetBookmarkResponse]
	createBookmark               *connect_go.Client[v1.CreateBookmarkRequest, v1.CreateBookmarkResponse]
	removeBookmark               *connect_go.Client[v1.RemoveBookmarkRequest, v1.RemoveBookmarkResponse]
}

// Ping calls rill.admin.v1.AdminService.Ping.
func (c *adminServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ListOrganizations calls rill.admin.v1.AdminService.ListOrganizations.
func (c *adminServiceClient) ListOrganizations(ctx context.Context, req *connect_go.Request[v1.ListOrganizationsRequest]) (*connect_go.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// GetOrganization calls rill.admin.v1.AdminService.GetOrganization.
func (c *adminServiceClient) GetOrganization(ctx context.Context, req *connect_go.Request[v1.GetOrganizationRequest]) (*connect_go.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// CreateOrganization calls rill.admin.v1.AdminService.CreateOrganization.
func (c *adminServiceClient) CreateOrganization(ctx context.Context, req *connect_go.Request[v1.CreateOrganizationRequest]) (*connect_go.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// DeleteOrganization calls rill.admin.v1.AdminService.DeleteOrganization.
func (c *adminServiceClient) DeleteOrganization(ctx context.Context, req *connect_go.Request[v1.DeleteOrganizationRequest]) (*connect_go.Response[v1.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls rill.admin.v1.AdminService.UpdateOrganization.
func (c *adminServiceClient) UpdateOrganization(ctx context.Context, req *connect_go.Request[v1.UpdateOrganizationRequest]) (*connect_go.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ListProjectsForOrganization calls rill.admin.v1.AdminService.ListProjectsForOrganization.
func (c *adminServiceClient) ListProjectsForOrganization(ctx context.Context, req *connect_go.Request[v1.ListProjectsForOrganizationRequest]) (*connect_go.Response[v1.ListProjectsForOrganizationResponse], error) {
	return c.listProjectsForOrganization.CallUnary(ctx, req)
}

// GetProject calls rill.admin.v1.AdminService.GetProject.
func (c *adminServiceClient) GetProject(ctx context.Context, req *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// SearchProjectNames calls rill.admin.v1.AdminService.SearchProjectNames.
func (c *adminServiceClient) SearchProjectNames(ctx context.Context, req *connect_go.Request[v1.SearchProjectNamesRequest]) (*connect_go.Response[v1.SearchProjectNamesResponse], error) {
	return c.searchProjectNames.CallUnary(ctx, req)
}

// GetProjectVariables calls rill.admin.v1.AdminService.GetProjectVariables.
func (c *adminServiceClient) GetProjectVariables(ctx context.Context, req *connect_go.Request[v1.GetProjectVariablesRequest]) (*connect_go.Response[v1.GetProjectVariablesResponse], error) {
	return c.getProjectVariables.CallUnary(ctx, req)
}

// CreateProject calls rill.admin.v1.AdminService.CreateProject.
func (c *adminServiceClient) CreateProject(ctx context.Context, req *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// DeleteProject calls rill.admin.v1.AdminService.DeleteProject.
func (c *adminServiceClient) DeleteProject(ctx context.Context, req *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// UpdateProject calls rill.admin.v1.AdminService.UpdateProject.
func (c *adminServiceClient) UpdateProject(ctx context.Context, req *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// UpdateProjectVariables calls rill.admin.v1.AdminService.UpdateProjectVariables.
func (c *adminServiceClient) UpdateProjectVariables(ctx context.Context, req *connect_go.Request[v1.UpdateProjectVariablesRequest]) (*connect_go.Response[v1.UpdateProjectVariablesResponse], error) {
	return c.updateProjectVariables.CallUnary(ctx, req)
}

// TriggerReconcile calls rill.admin.v1.AdminService.TriggerReconcile.
func (c *adminServiceClient) TriggerReconcile(ctx context.Context, req *connect_go.Request[v1.TriggerReconcileRequest]) (*connect_go.Response[v1.TriggerReconcileResponse], error) {
	return c.triggerReconcile.CallUnary(ctx, req)
}

// TriggerRefreshSources calls rill.admin.v1.AdminService.TriggerRefreshSources.
func (c *adminServiceClient) TriggerRefreshSources(ctx context.Context, req *connect_go.Request[v1.TriggerRefreshSourcesRequest]) (*connect_go.Response[v1.TriggerRefreshSourcesResponse], error) {
	return c.triggerRefreshSources.CallUnary(ctx, req)
}

// TriggerRedeploy calls rill.admin.v1.AdminService.TriggerRedeploy.
func (c *adminServiceClient) TriggerRedeploy(ctx context.Context, req *connect_go.Request[v1.TriggerRedeployRequest]) (*connect_go.Response[v1.TriggerRedeployResponse], error) {
	return c.triggerRedeploy.CallUnary(ctx, req)
}

// ListOrganizationMembers calls rill.admin.v1.AdminService.ListOrganizationMembers.
func (c *adminServiceClient) ListOrganizationMembers(ctx context.Context, req *connect_go.Request[v1.ListOrganizationMembersRequest]) (*connect_go.Response[v1.ListOrganizationMembersResponse], error) {
	return c.listOrganizationMembers.CallUnary(ctx, req)
}

// ListOrganizationInvites calls rill.admin.v1.AdminService.ListOrganizationInvites.
func (c *adminServiceClient) ListOrganizationInvites(ctx context.Context, req *connect_go.Request[v1.ListOrganizationInvitesRequest]) (*connect_go.Response[v1.ListOrganizationInvitesResponse], error) {
	return c.listOrganizationInvites.CallUnary(ctx, req)
}

// AddOrganizationMember calls rill.admin.v1.AdminService.AddOrganizationMember.
func (c *adminServiceClient) AddOrganizationMember(ctx context.Context, req *connect_go.Request[v1.AddOrganizationMemberRequest]) (*connect_go.Response[v1.AddOrganizationMemberResponse], error) {
	return c.addOrganizationMember.CallUnary(ctx, req)
}

// RemoveOrganizationMember calls rill.admin.v1.AdminService.RemoveOrganizationMember.
func (c *adminServiceClient) RemoveOrganizationMember(ctx context.Context, req *connect_go.Request[v1.RemoveOrganizationMemberRequest]) (*connect_go.Response[v1.RemoveOrganizationMemberResponse], error) {
	return c.removeOrganizationMember.CallUnary(ctx, req)
}

// LeaveOrganization calls rill.admin.v1.AdminService.LeaveOrganization.
func (c *adminServiceClient) LeaveOrganization(ctx context.Context, req *connect_go.Request[v1.LeaveOrganizationRequest]) (*connect_go.Response[v1.LeaveOrganizationResponse], error) {
	return c.leaveOrganization.CallUnary(ctx, req)
}

// SetOrganizationMemberRole calls rill.admin.v1.AdminService.SetOrganizationMemberRole.
func (c *adminServiceClient) SetOrganizationMemberRole(ctx context.Context, req *connect_go.Request[v1.SetOrganizationMemberRoleRequest]) (*connect_go.Response[v1.SetOrganizationMemberRoleResponse], error) {
	return c.setOrganizationMemberRole.CallUnary(ctx, req)
}

// ListProjectMembers calls rill.admin.v1.AdminService.ListProjectMembers.
func (c *adminServiceClient) ListProjectMembers(ctx context.Context, req *connect_go.Request[v1.ListProjectMembersRequest]) (*connect_go.Response[v1.ListProjectMembersResponse], error) {
	return c.listProjectMembers.CallUnary(ctx, req)
}

// ListProjectInvites calls rill.admin.v1.AdminService.ListProjectInvites.
func (c *adminServiceClient) ListProjectInvites(ctx context.Context, req *connect_go.Request[v1.ListProjectInvitesRequest]) (*connect_go.Response[v1.ListProjectInvitesResponse], error) {
	return c.listProjectInvites.CallUnary(ctx, req)
}

// AddProjectMember calls rill.admin.v1.AdminService.AddProjectMember.
func (c *adminServiceClient) AddProjectMember(ctx context.Context, req *connect_go.Request[v1.AddProjectMemberRequest]) (*connect_go.Response[v1.AddProjectMemberResponse], error) {
	return c.addProjectMember.CallUnary(ctx, req)
}

// RemoveProjectMember calls rill.admin.v1.AdminService.RemoveProjectMember.
func (c *adminServiceClient) RemoveProjectMember(ctx context.Context, req *connect_go.Request[v1.RemoveProjectMemberRequest]) (*connect_go.Response[v1.RemoveProjectMemberResponse], error) {
	return c.removeProjectMember.CallUnary(ctx, req)
}

// SetProjectMemberRole calls rill.admin.v1.AdminService.SetProjectMemberRole.
func (c *adminServiceClient) SetProjectMemberRole(ctx context.Context, req *connect_go.Request[v1.SetProjectMemberRoleRequest]) (*connect_go.Response[v1.SetProjectMemberRoleResponse], error) {
	return c.setProjectMemberRole.CallUnary(ctx, req)
}

// GetCurrentUser calls rill.admin.v1.AdminService.GetCurrentUser.
func (c *adminServiceClient) GetCurrentUser(ctx context.Context, req *connect_go.Request[v1.GetCurrentUserRequest]) (*connect_go.Response[v1.GetCurrentUserResponse], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// IssueRepresentativeAuthToken calls rill.admin.v1.AdminService.IssueRepresentativeAuthToken.
func (c *adminServiceClient) IssueRepresentativeAuthToken(ctx context.Context, req *connect_go.Request[v1.IssueRepresentativeAuthTokenRequest]) (*connect_go.Response[v1.IssueRepresentativeAuthTokenResponse], error) {
	return c.issueRepresentativeAuthToken.CallUnary(ctx, req)
}

// RevokeCurrentAuthToken calls rill.admin.v1.AdminService.RevokeCurrentAuthToken.
func (c *adminServiceClient) RevokeCurrentAuthToken(ctx context.Context, req *connect_go.Request[v1.RevokeCurrentAuthTokenRequest]) (*connect_go.Response[v1.RevokeCurrentAuthTokenResponse], error) {
	return c.revokeCurrentAuthToken.CallUnary(ctx, req)
}

// GetGithubRepoStatus calls rill.admin.v1.AdminService.GetGithubRepoStatus.
func (c *adminServiceClient) GetGithubRepoStatus(ctx context.Context, req *connect_go.Request[v1.GetGithubRepoStatusRequest]) (*connect_go.Response[v1.GetGithubRepoStatusResponse], error) {
	return c.getGithubRepoStatus.CallUnary(ctx, req)
}

// GetGitCredentials calls rill.admin.v1.AdminService.GetGitCredentials.
func (c *adminServiceClient) GetGitCredentials(ctx context.Context, req *connect_go.Request[v1.GetGitCredentialsRequest]) (*connect_go.Response[v1.GetGitCredentialsResponse], error) {
	return c.getGitCredentials.CallUnary(ctx, req)
}

// CreateWhitelistedDomain calls rill.admin.v1.AdminService.CreateWhitelistedDomain.
func (c *adminServiceClient) CreateWhitelistedDomain(ctx context.Context, req *connect_go.Request[v1.CreateWhitelistedDomainRequest]) (*connect_go.Response[v1.CreateWhitelistedDomainResponse], error) {
	return c.createWhitelistedDomain.CallUnary(ctx, req)
}

// RemoveWhitelistedDomain calls rill.admin.v1.AdminService.RemoveWhitelistedDomain.
func (c *adminServiceClient) RemoveWhitelistedDomain(ctx context.Context, req *connect_go.Request[v1.RemoveWhitelistedDomainRequest]) (*connect_go.Response[v1.RemoveWhitelistedDomainResponse], error) {
	return c.removeWhitelistedDomain.CallUnary(ctx, req)
}

// ListWhitelistedDomains calls rill.admin.v1.AdminService.ListWhitelistedDomains.
func (c *adminServiceClient) ListWhitelistedDomains(ctx context.Context, req *connect_go.Request[v1.ListWhitelistedDomainsRequest]) (*connect_go.Response[v1.ListWhitelistedDomainsResponse], error) {
	return c.listWhitelistedDomains.CallUnary(ctx, req)
}

// GetUser calls rill.admin.v1.AdminService.GetUser.
func (c *adminServiceClient) GetUser(ctx context.Context, req *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// SearchUsers calls rill.admin.v1.AdminService.SearchUsers.
func (c *adminServiceClient) SearchUsers(ctx context.Context, req *connect_go.Request[v1.SearchUsersRequest]) (*connect_go.Response[v1.SearchUsersResponse], error) {
	return c.searchUsers.CallUnary(ctx, req)
}

// ListSuperusers calls rill.admin.v1.AdminService.ListSuperusers.
func (c *adminServiceClient) ListSuperusers(ctx context.Context, req *connect_go.Request[v1.ListSuperusersRequest]) (*connect_go.Response[v1.ListSuperusersResponse], error) {
	return c.listSuperusers.CallUnary(ctx, req)
}

// SetSuperuser calls rill.admin.v1.AdminService.SetSuperuser.
func (c *adminServiceClient) SetSuperuser(ctx context.Context, req *connect_go.Request[v1.SetSuperuserRequest]) (*connect_go.Response[v1.SetSuperuserResponse], error) {
	return c.setSuperuser.CallUnary(ctx, req)
}

// SudoGetResource calls rill.admin.v1.AdminService.SudoGetResource.
func (c *adminServiceClient) SudoGetResource(ctx context.Context, req *connect_go.Request[v1.SudoGetResourceRequest]) (*connect_go.Response[v1.SudoGetResourceResponse], error) {
	return c.sudoGetResource.CallUnary(ctx, req)
}

// SudoUpdateUserQuotas calls rill.admin.v1.AdminService.SudoUpdateUserQuotas.
func (c *adminServiceClient) SudoUpdateUserQuotas(ctx context.Context, req *connect_go.Request[v1.SudoUpdateUserQuotasRequest]) (*connect_go.Response[v1.SudoUpdateUserQuotasResponse], error) {
	return c.sudoUpdateUserQuotas.CallUnary(ctx, req)
}

// SudoUpdateOrganizationQuotas calls rill.admin.v1.AdminService.SudoUpdateOrganizationQuotas.
func (c *adminServiceClient) SudoUpdateOrganizationQuotas(ctx context.Context, req *connect_go.Request[v1.SudoUpdateOrganizationQuotasRequest]) (*connect_go.Response[v1.SudoUpdateOrganizationQuotasResponse], error) {
	return c.sudoUpdateOrganizationQuotas.CallUnary(ctx, req)
}

// UpdateUserPreferences calls rill.admin.v1.AdminService.UpdateUserPreferences.
func (c *adminServiceClient) UpdateUserPreferences(ctx context.Context, req *connect_go.Request[v1.UpdateUserPreferencesRequest]) (*connect_go.Response[v1.UpdateUserPreferencesResponse], error) {
	return c.updateUserPreferences.CallUnary(ctx, req)
}

// ListBookmarks calls rill.admin.v1.AdminService.ListBookmarks.
func (c *adminServiceClient) ListBookmarks(ctx context.Context, req *connect_go.Request[v1.ListBookmarksRequest]) (*connect_go.Response[v1.ListBookmarksResponse], error) {
	return c.listBookmarks.CallUnary(ctx, req)
}

// GetBookmark calls rill.admin.v1.AdminService.GetBookmark.
func (c *adminServiceClient) GetBookmark(ctx context.Context, req *connect_go.Request[v1.GetBookmarkRequest]) (*connect_go.Response[v1.GetBookmarkResponse], error) {
	return c.getBookmark.CallUnary(ctx, req)
}

// CreateBookmark calls rill.admin.v1.AdminService.CreateBookmark.
func (c *adminServiceClient) CreateBookmark(ctx context.Context, req *connect_go.Request[v1.CreateBookmarkRequest]) (*connect_go.Response[v1.CreateBookmarkResponse], error) {
	return c.createBookmark.CallUnary(ctx, req)
}

// RemoveBookmark calls rill.admin.v1.AdminService.RemoveBookmark.
func (c *adminServiceClient) RemoveBookmark(ctx context.Context, req *connect_go.Request[v1.RemoveBookmarkRequest]) (*connect_go.Response[v1.RemoveBookmarkResponse], error) {
	return c.removeBookmark.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the rill.admin.v1.AdminService service.
type AdminServiceHandler interface {
	// Ping returns information about the server
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// ListOrganizations lists all the organizations currently managed by the admin
	ListOrganizations(context.Context, *connect_go.Request[v1.ListOrganizationsRequest]) (*connect_go.Response[v1.ListOrganizationsResponse], error)
	// GetOrganization returns information about a specific organization
	GetOrganization(context.Context, *connect_go.Request[v1.GetOrganizationRequest]) (*connect_go.Response[v1.GetOrganizationResponse], error)
	// CreateOrganization creates a new organization
	CreateOrganization(context.Context, *connect_go.Request[v1.CreateOrganizationRequest]) (*connect_go.Response[v1.CreateOrganizationResponse], error)
	// DeleteOrganization deletes an organizations
	DeleteOrganization(context.Context, *connect_go.Request[v1.DeleteOrganizationRequest]) (*connect_go.Response[v1.DeleteOrganizationResponse], error)
	// UpdateOrganization deletes an organizations
	UpdateOrganization(context.Context, *connect_go.Request[v1.UpdateOrganizationRequest]) (*connect_go.Response[v1.UpdateOrganizationResponse], error)
	// ListProjectsForOrganization lists all the projects currently available for given organizations
	ListProjectsForOrganization(context.Context, *connect_go.Request[v1.ListProjectsForOrganizationRequest]) (*connect_go.Response[v1.ListProjectsForOrganizationResponse], error)
	// GetProject returns information about a specific project
	GetProject(context.Context, *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.GetProjectResponse], error)
	// SearchProjectNames returns project names matching the pattern
	SearchProjectNames(context.Context, *connect_go.Request[v1.SearchProjectNamesRequest]) (*connect_go.Response[v1.SearchProjectNamesResponse], error)
	// GetProjectVariables returns project variables. NOTE: Get project API doesn't return variables.
	GetProjectVariables(context.Context, *connect_go.Request[v1.GetProjectVariablesRequest]) (*connect_go.Response[v1.GetProjectVariablesResponse], error)
	// CreateProject creates a new project
	CreateProject(context.Context, *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.CreateProjectResponse], error)
	// DeleteProject deletes an project
	DeleteProject(context.Context, *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.DeleteProjectResponse], error)
	// UpdateProject updates a project
	UpdateProject(context.Context, *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.UpdateProjectResponse], error)
	// UpdateProjectVariables updates variables for a project. NOTE: Update project API doesn't update variables.
	UpdateProjectVariables(context.Context, *connect_go.Request[v1.UpdateProjectVariablesRequest]) (*connect_go.Response[v1.UpdateProjectVariablesResponse], error)
	// TriggerReconcile triggers reconcile for the project's prod deployment
	TriggerReconcile(context.Context, *connect_go.Request[v1.TriggerReconcileRequest]) (*connect_go.Response[v1.TriggerReconcileResponse], error)
	// TriggerRefreshSources refresh the source for production deployment
	TriggerRefreshSources(context.Context, *connect_go.Request[v1.TriggerRefreshSourcesRequest]) (*connect_go.Response[v1.TriggerRefreshSourcesResponse], error)
	// TriggerRedeploy creates a new deployment and teardown the old deployment for production deployment
	TriggerRedeploy(context.Context, *connect_go.Request[v1.TriggerRedeployRequest]) (*connect_go.Response[v1.TriggerRedeployResponse], error)
	// ListOrganizationMembers lists all the org members
	ListOrganizationMembers(context.Context, *connect_go.Request[v1.ListOrganizationMembersRequest]) (*connect_go.Response[v1.ListOrganizationMembersResponse], error)
	// ListOrganizationInvites lists all the org invites
	ListOrganizationInvites(context.Context, *connect_go.Request[v1.ListOrganizationInvitesRequest]) (*connect_go.Response[v1.ListOrganizationInvitesResponse], error)
	// AddOrganizationMember lists all the org members
	AddOrganizationMember(context.Context, *connect_go.Request[v1.AddOrganizationMemberRequest]) (*connect_go.Response[v1.AddOrganizationMemberResponse], error)
	// RemoveOrganizationMember removes member from the organization
	RemoveOrganizationMember(context.Context, *connect_go.Request[v1.RemoveOrganizationMemberRequest]) (*connect_go.Response[v1.RemoveOrganizationMemberResponse], error)
	// LeaveOrganization removes the current user from the organization
	LeaveOrganization(context.Context, *connect_go.Request[v1.LeaveOrganizationRequest]) (*connect_go.Response[v1.LeaveOrganizationResponse], error)
	// SetOrganizationMemberRole sets the role for the member
	SetOrganizationMemberRole(context.Context, *connect_go.Request[v1.SetOrganizationMemberRoleRequest]) (*connect_go.Response[v1.SetOrganizationMemberRoleResponse], error)
	// ListProjectMembers lists all the project members
	ListProjectMembers(context.Context, *connect_go.Request[v1.ListProjectMembersRequest]) (*connect_go.Response[v1.ListProjectMembersResponse], error)
	// ListProjectInvites lists all the project invites
	ListProjectInvites(context.Context, *connect_go.Request[v1.ListProjectInvitesRequest]) (*connect_go.Response[v1.ListProjectInvitesResponse], error)
	// AddProjectMember adds a member to the project
	AddProjectMember(context.Context, *connect_go.Request[v1.AddProjectMemberRequest]) (*connect_go.Response[v1.AddProjectMemberResponse], error)
	// RemoveProjectMember removes member from the project
	RemoveProjectMember(context.Context, *connect_go.Request[v1.RemoveProjectMemberRequest]) (*connect_go.Response[v1.RemoveProjectMemberResponse], error)
	// SetProjectMemberRole sets the role for the member
	SetProjectMemberRole(context.Context, *connect_go.Request[v1.SetProjectMemberRoleRequest]) (*connect_go.Response[v1.SetProjectMemberRoleResponse], error)
	// GetCurrentUser returns the currently authenticated user (if any)
	GetCurrentUser(context.Context, *connect_go.Request[v1.GetCurrentUserRequest]) (*connect_go.Response[v1.GetCurrentUserResponse], error)
	// IssueRepresentativeAuthToken returns the temporary token for given email
	IssueRepresentativeAuthToken(context.Context, *connect_go.Request[v1.IssueRepresentativeAuthTokenRequest]) (*connect_go.Response[v1.IssueRepresentativeAuthTokenResponse], error)
	// RevokeCurrentAuthToken revoke the current auth token
	RevokeCurrentAuthToken(context.Context, *connect_go.Request[v1.RevokeCurrentAuthTokenRequest]) (*connect_go.Response[v1.RevokeCurrentAuthTokenResponse], error)
	// GetGithubRepoRequest returns info about a Github repo based on the caller's installations.
	// If the caller has not granted access to the repository, instructions for granting access are returned.
	GetGithubRepoStatus(context.Context, *connect_go.Request[v1.GetGithubRepoStatusRequest]) (*connect_go.Response[v1.GetGithubRepoStatusResponse], error)
	// GetGitCredentials returns credentials and other details for a project's Git repository.
	GetGitCredentials(context.Context, *connect_go.Request[v1.GetGitCredentialsRequest]) (*connect_go.Response[v1.GetGitCredentialsResponse], error)
	// CreateWhitelistedDomain adds a domain to the whitelist
	CreateWhitelistedDomain(context.Context, *connect_go.Request[v1.CreateWhitelistedDomainRequest]) (*connect_go.Response[v1.CreateWhitelistedDomainResponse], error)
	// RemoveWhitelistedDomain removes a domain from the whitelist list
	RemoveWhitelistedDomain(context.Context, *connect_go.Request[v1.RemoveWhitelistedDomainRequest]) (*connect_go.Response[v1.RemoveWhitelistedDomainResponse], error)
	// ListWhitelistedDomains lists all the whitelisted domains for the organization
	ListWhitelistedDomains(context.Context, *connect_go.Request[v1.ListWhitelistedDomainsRequest]) (*connect_go.Response[v1.ListWhitelistedDomainsResponse], error)
	// GetUser returns user by email
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error)
	// GetUsersByEmail returns users by email
	SearchUsers(context.Context, *connect_go.Request[v1.SearchUsersRequest]) (*connect_go.Response[v1.SearchUsersResponse], error)
	// ListSuperusers lists all the superusers
	ListSuperusers(context.Context, *connect_go.Request[v1.ListSuperusersRequest]) (*connect_go.Response[v1.ListSuperusersResponse], error)
	// SetSuperuser adds/remove a superuser
	SetSuperuser(context.Context, *connect_go.Request[v1.SetSuperuserRequest]) (*connect_go.Response[v1.SetSuperuserResponse], error)
	// SudoGetResource returns details about a resource by ID lookup
	SudoGetResource(context.Context, *connect_go.Request[v1.SudoGetResourceRequest]) (*connect_go.Response[v1.SudoGetResourceResponse], error)
	// SudoUpdateUserQuotas update the quotas for users
	SudoUpdateUserQuotas(context.Context, *connect_go.Request[v1.SudoUpdateUserQuotasRequest]) (*connect_go.Response[v1.SudoUpdateUserQuotasResponse], error)
	// SudoUpdateOrganizationQuotas update the quotas available for orgs
	SudoUpdateOrganizationQuotas(context.Context, *connect_go.Request[v1.SudoUpdateOrganizationQuotasRequest]) (*connect_go.Response[v1.SudoUpdateOrganizationQuotasResponse], error)
	// UpdateUserPreferences updates the preferences for the user
	UpdateUserPreferences(context.Context, *connect_go.Request[v1.UpdateUserPreferencesRequest]) (*connect_go.Response[v1.UpdateUserPreferencesResponse], error)
	// ListBookmarks lists all the bookmarks for the user
	ListBookmarks(context.Context, *connect_go.Request[v1.ListBookmarksRequest]) (*connect_go.Response[v1.ListBookmarksResponse], error)
	// GetBookmark returns the bookmark for the given user for the given project
	GetBookmark(context.Context, *connect_go.Request[v1.GetBookmarkRequest]) (*connect_go.Response[v1.GetBookmarkResponse], error)
	// CreateBookmark creates a bookmark for the given user for the given project
	CreateBookmark(context.Context, *connect_go.Request[v1.CreateBookmarkRequest]) (*connect_go.Response[v1.CreateBookmarkResponse], error)
	// RemoveBookmark removes the bookmark for the given user for the given project
	RemoveBookmark(context.Context, *connect_go.Request[v1.RemoveBookmarkRequest]) (*connect_go.Response[v1.RemoveBookmarkResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	adminServicePingHandler := connect_go.NewUnaryHandler(
		AdminServicePingProcedure,
		svc.Ping,
		opts...,
	)
	adminServiceListOrganizationsHandler := connect_go.NewUnaryHandler(
		AdminServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		opts...,
	)
	adminServiceGetOrganizationHandler := connect_go.NewUnaryHandler(
		AdminServiceGetOrganizationProcedure,
		svc.GetOrganization,
		opts...,
	)
	adminServiceCreateOrganizationHandler := connect_go.NewUnaryHandler(
		AdminServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		opts...,
	)
	adminServiceDeleteOrganizationHandler := connect_go.NewUnaryHandler(
		AdminServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		opts...,
	)
	adminServiceUpdateOrganizationHandler := connect_go.NewUnaryHandler(
		AdminServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		opts...,
	)
	adminServiceListProjectsForOrganizationHandler := connect_go.NewUnaryHandler(
		AdminServiceListProjectsForOrganizationProcedure,
		svc.ListProjectsForOrganization,
		opts...,
	)
	adminServiceGetProjectHandler := connect_go.NewUnaryHandler(
		AdminServiceGetProjectProcedure,
		svc.GetProject,
		opts...,
	)
	adminServiceSearchProjectNamesHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchProjectNamesProcedure,
		svc.SearchProjectNames,
		opts...,
	)
	adminServiceGetProjectVariablesHandler := connect_go.NewUnaryHandler(
		AdminServiceGetProjectVariablesProcedure,
		svc.GetProjectVariables,
		opts...,
	)
	adminServiceCreateProjectHandler := connect_go.NewUnaryHandler(
		AdminServiceCreateProjectProcedure,
		svc.CreateProject,
		opts...,
	)
	adminServiceDeleteProjectHandler := connect_go.NewUnaryHandler(
		AdminServiceDeleteProjectProcedure,
		svc.DeleteProject,
		opts...,
	)
	adminServiceUpdateProjectHandler := connect_go.NewUnaryHandler(
		AdminServiceUpdateProjectProcedure,
		svc.UpdateProject,
		opts...,
	)
	adminServiceUpdateProjectVariablesHandler := connect_go.NewUnaryHandler(
		AdminServiceUpdateProjectVariablesProcedure,
		svc.UpdateProjectVariables,
		opts...,
	)
	adminServiceTriggerReconcileHandler := connect_go.NewUnaryHandler(
		AdminServiceTriggerReconcileProcedure,
		svc.TriggerReconcile,
		opts...,
	)
	adminServiceTriggerRefreshSourcesHandler := connect_go.NewUnaryHandler(
		AdminServiceTriggerRefreshSourcesProcedure,
		svc.TriggerRefreshSources,
		opts...,
	)
	adminServiceTriggerRedeployHandler := connect_go.NewUnaryHandler(
		AdminServiceTriggerRedeployProcedure,
		svc.TriggerRedeploy,
		opts...,
	)
	adminServiceListOrganizationMembersHandler := connect_go.NewUnaryHandler(
		AdminServiceListOrganizationMembersProcedure,
		svc.ListOrganizationMembers,
		opts...,
	)
	adminServiceListOrganizationInvitesHandler := connect_go.NewUnaryHandler(
		AdminServiceListOrganizationInvitesProcedure,
		svc.ListOrganizationInvites,
		opts...,
	)
	adminServiceAddOrganizationMemberHandler := connect_go.NewUnaryHandler(
		AdminServiceAddOrganizationMemberProcedure,
		svc.AddOrganizationMember,
		opts...,
	)
	adminServiceRemoveOrganizationMemberHandler := connect_go.NewUnaryHandler(
		AdminServiceRemoveOrganizationMemberProcedure,
		svc.RemoveOrganizationMember,
		opts...,
	)
	adminServiceLeaveOrganizationHandler := connect_go.NewUnaryHandler(
		AdminServiceLeaveOrganizationProcedure,
		svc.LeaveOrganization,
		opts...,
	)
	adminServiceSetOrganizationMemberRoleHandler := connect_go.NewUnaryHandler(
		AdminServiceSetOrganizationMemberRoleProcedure,
		svc.SetOrganizationMemberRole,
		opts...,
	)
	adminServiceListProjectMembersHandler := connect_go.NewUnaryHandler(
		AdminServiceListProjectMembersProcedure,
		svc.ListProjectMembers,
		opts...,
	)
	adminServiceListProjectInvitesHandler := connect_go.NewUnaryHandler(
		AdminServiceListProjectInvitesProcedure,
		svc.ListProjectInvites,
		opts...,
	)
	adminServiceAddProjectMemberHandler := connect_go.NewUnaryHandler(
		AdminServiceAddProjectMemberProcedure,
		svc.AddProjectMember,
		opts...,
	)
	adminServiceRemoveProjectMemberHandler := connect_go.NewUnaryHandler(
		AdminServiceRemoveProjectMemberProcedure,
		svc.RemoveProjectMember,
		opts...,
	)
	adminServiceSetProjectMemberRoleHandler := connect_go.NewUnaryHandler(
		AdminServiceSetProjectMemberRoleProcedure,
		svc.SetProjectMemberRole,
		opts...,
	)
	adminServiceGetCurrentUserHandler := connect_go.NewUnaryHandler(
		AdminServiceGetCurrentUserProcedure,
		svc.GetCurrentUser,
		opts...,
	)
	adminServiceIssueRepresentativeAuthTokenHandler := connect_go.NewUnaryHandler(
		AdminServiceIssueRepresentativeAuthTokenProcedure,
		svc.IssueRepresentativeAuthToken,
		opts...,
	)
	adminServiceRevokeCurrentAuthTokenHandler := connect_go.NewUnaryHandler(
		AdminServiceRevokeCurrentAuthTokenProcedure,
		svc.RevokeCurrentAuthToken,
		opts...,
	)
	adminServiceGetGithubRepoStatusHandler := connect_go.NewUnaryHandler(
		AdminServiceGetGithubRepoStatusProcedure,
		svc.GetGithubRepoStatus,
		opts...,
	)
	adminServiceGetGitCredentialsHandler := connect_go.NewUnaryHandler(
		AdminServiceGetGitCredentialsProcedure,
		svc.GetGitCredentials,
		opts...,
	)
	adminServiceCreateWhitelistedDomainHandler := connect_go.NewUnaryHandler(
		AdminServiceCreateWhitelistedDomainProcedure,
		svc.CreateWhitelistedDomain,
		opts...,
	)
	adminServiceRemoveWhitelistedDomainHandler := connect_go.NewUnaryHandler(
		AdminServiceRemoveWhitelistedDomainProcedure,
		svc.RemoveWhitelistedDomain,
		opts...,
	)
	adminServiceListWhitelistedDomainsHandler := connect_go.NewUnaryHandler(
		AdminServiceListWhitelistedDomainsProcedure,
		svc.ListWhitelistedDomains,
		opts...,
	)
	adminServiceGetUserHandler := connect_go.NewUnaryHandler(
		AdminServiceGetUserProcedure,
		svc.GetUser,
		opts...,
	)
	adminServiceSearchUsersHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchUsersProcedure,
		svc.SearchUsers,
		opts...,
	)
	adminServiceListSuperusersHandler := connect_go.NewUnaryHandler(
		AdminServiceListSuperusersProcedure,
		svc.ListSuperusers,
		opts...,
	)
	adminServiceSetSuperuserHandler := connect_go.NewUnaryHandler(
		AdminServiceSetSuperuserProcedure,
		svc.SetSuperuser,
		opts...,
	)
	adminServiceSudoGetResourceHandler := connect_go.NewUnaryHandler(
		AdminServiceSudoGetResourceProcedure,
		svc.SudoGetResource,
		opts...,
	)
	adminServiceSudoUpdateUserQuotasHandler := connect_go.NewUnaryHandler(
		AdminServiceSudoUpdateUserQuotasProcedure,
		svc.SudoUpdateUserQuotas,
		opts...,
	)
	adminServiceSudoUpdateOrganizationQuotasHandler := connect_go.NewUnaryHandler(
		AdminServiceSudoUpdateOrganizationQuotasProcedure,
		svc.SudoUpdateOrganizationQuotas,
		opts...,
	)
	adminServiceUpdateUserPreferencesHandler := connect_go.NewUnaryHandler(
		AdminServiceUpdateUserPreferencesProcedure,
		svc.UpdateUserPreferences,
		opts...,
	)
	adminServiceListBookmarksHandler := connect_go.NewUnaryHandler(
		AdminServiceListBookmarksProcedure,
		svc.ListBookmarks,
		opts...,
	)
	adminServiceGetBookmarkHandler := connect_go.NewUnaryHandler(
		AdminServiceGetBookmarkProcedure,
		svc.GetBookmark,
		opts...,
	)
	adminServiceCreateBookmarkHandler := connect_go.NewUnaryHandler(
		AdminServiceCreateBookmarkProcedure,
		svc.CreateBookmark,
		opts...,
	)
	adminServiceRemoveBookmarkHandler := connect_go.NewUnaryHandler(
		AdminServiceRemoveBookmarkProcedure,
		svc.RemoveBookmark,
		opts...,
	)
	return "/rill.admin.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServicePingProcedure:
			adminServicePingHandler.ServeHTTP(w, r)
		case AdminServiceListOrganizationsProcedure:
			adminServiceListOrganizationsHandler.ServeHTTP(w, r)
		case AdminServiceGetOrganizationProcedure:
			adminServiceGetOrganizationHandler.ServeHTTP(w, r)
		case AdminServiceCreateOrganizationProcedure:
			adminServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case AdminServiceDeleteOrganizationProcedure:
			adminServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		case AdminServiceUpdateOrganizationProcedure:
			adminServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case AdminServiceListProjectsForOrganizationProcedure:
			adminServiceListProjectsForOrganizationHandler.ServeHTTP(w, r)
		case AdminServiceGetProjectProcedure:
			adminServiceGetProjectHandler.ServeHTTP(w, r)
		case AdminServiceSearchProjectNamesProcedure:
			adminServiceSearchProjectNamesHandler.ServeHTTP(w, r)
		case AdminServiceGetProjectVariablesProcedure:
			adminServiceGetProjectVariablesHandler.ServeHTTP(w, r)
		case AdminServiceCreateProjectProcedure:
			adminServiceCreateProjectHandler.ServeHTTP(w, r)
		case AdminServiceDeleteProjectProcedure:
			adminServiceDeleteProjectHandler.ServeHTTP(w, r)
		case AdminServiceUpdateProjectProcedure:
			adminServiceUpdateProjectHandler.ServeHTTP(w, r)
		case AdminServiceUpdateProjectVariablesProcedure:
			adminServiceUpdateProjectVariablesHandler.ServeHTTP(w, r)
		case AdminServiceTriggerReconcileProcedure:
			adminServiceTriggerReconcileHandler.ServeHTTP(w, r)
		case AdminServiceTriggerRefreshSourcesProcedure:
			adminServiceTriggerRefreshSourcesHandler.ServeHTTP(w, r)
		case AdminServiceTriggerRedeployProcedure:
			adminServiceTriggerRedeployHandler.ServeHTTP(w, r)
		case AdminServiceListOrganizationMembersProcedure:
			adminServiceListOrganizationMembersHandler.ServeHTTP(w, r)
		case AdminServiceListOrganizationInvitesProcedure:
			adminServiceListOrganizationInvitesHandler.ServeHTTP(w, r)
		case AdminServiceAddOrganizationMemberProcedure:
			adminServiceAddOrganizationMemberHandler.ServeHTTP(w, r)
		case AdminServiceRemoveOrganizationMemberProcedure:
			adminServiceRemoveOrganizationMemberHandler.ServeHTTP(w, r)
		case AdminServiceLeaveOrganizationProcedure:
			adminServiceLeaveOrganizationHandler.ServeHTTP(w, r)
		case AdminServiceSetOrganizationMemberRoleProcedure:
			adminServiceSetOrganizationMemberRoleHandler.ServeHTTP(w, r)
		case AdminServiceListProjectMembersProcedure:
			adminServiceListProjectMembersHandler.ServeHTTP(w, r)
		case AdminServiceListProjectInvitesProcedure:
			adminServiceListProjectInvitesHandler.ServeHTTP(w, r)
		case AdminServiceAddProjectMemberProcedure:
			adminServiceAddProjectMemberHandler.ServeHTTP(w, r)
		case AdminServiceRemoveProjectMemberProcedure:
			adminServiceRemoveProjectMemberHandler.ServeHTTP(w, r)
		case AdminServiceSetProjectMemberRoleProcedure:
			adminServiceSetProjectMemberRoleHandler.ServeHTTP(w, r)
		case AdminServiceGetCurrentUserProcedure:
			adminServiceGetCurrentUserHandler.ServeHTTP(w, r)
		case AdminServiceIssueRepresentativeAuthTokenProcedure:
			adminServiceIssueRepresentativeAuthTokenHandler.ServeHTTP(w, r)
		case AdminServiceRevokeCurrentAuthTokenProcedure:
			adminServiceRevokeCurrentAuthTokenHandler.ServeHTTP(w, r)
		case AdminServiceGetGithubRepoStatusProcedure:
			adminServiceGetGithubRepoStatusHandler.ServeHTTP(w, r)
		case AdminServiceGetGitCredentialsProcedure:
			adminServiceGetGitCredentialsHandler.ServeHTTP(w, r)
		case AdminServiceCreateWhitelistedDomainProcedure:
			adminServiceCreateWhitelistedDomainHandler.ServeHTTP(w, r)
		case AdminServiceRemoveWhitelistedDomainProcedure:
			adminServiceRemoveWhitelistedDomainHandler.ServeHTTP(w, r)
		case AdminServiceListWhitelistedDomainsProcedure:
			adminServiceListWhitelistedDomainsHandler.ServeHTTP(w, r)
		case AdminServiceGetUserProcedure:
			adminServiceGetUserHandler.ServeHTTP(w, r)
		case AdminServiceSearchUsersProcedure:
			adminServiceSearchUsersHandler.ServeHTTP(w, r)
		case AdminServiceListSuperusersProcedure:
			adminServiceListSuperusersHandler.ServeHTTP(w, r)
		case AdminServiceSetSuperuserProcedure:
			adminServiceSetSuperuserHandler.ServeHTTP(w, r)
		case AdminServiceSudoGetResourceProcedure:
			adminServiceSudoGetResourceHandler.ServeHTTP(w, r)
		case AdminServiceSudoUpdateUserQuotasProcedure:
			adminServiceSudoUpdateUserQuotasHandler.ServeHTTP(w, r)
		case AdminServiceSudoUpdateOrganizationQuotasProcedure:
			adminServiceSudoUpdateOrganizationQuotasHandler.ServeHTTP(w, r)
		case AdminServiceUpdateUserPreferencesProcedure:
			adminServiceUpdateUserPreferencesHandler.ServeHTTP(w, r)
		case AdminServiceListBookmarksProcedure:
			adminServiceListBookmarksHandler.ServeHTTP(w, r)
		case AdminServiceGetBookmarkProcedure:
			adminServiceGetBookmarkHandler.ServeHTTP(w, r)
		case AdminServiceCreateBookmarkProcedure:
			adminServiceCreateBookmarkHandler.ServeHTTP(w, r)
		case AdminServiceRemoveBookmarkProcedure:
			adminServiceRemoveBookmarkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.Ping is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListOrganizations(context.Context, *connect_go.Request[v1.ListOrganizationsRequest]) (*connect_go.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.ListOrganizations is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetOrganization(context.Context, *connect_go.Request[v1.GetOrganizationRequest]) (*connect_go.Response[v1.GetOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.GetOrganization is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateOrganization(context.Context, *connect_go.Request[v1.CreateOrganizationRequest]) (*connect_go.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.CreateOrganization is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteOrganization(context.Context, *connect_go.Request[v1.DeleteOrganizationRequest]) (*connect_go.Response[v1.DeleteOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.DeleteOrganization is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateOrganization(context.Context, *connect_go.Request[v1.UpdateOrganizationRequest]) (*connect_go.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.UpdateOrganization is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListProjectsForOrganization(context.Context, *connect_go.Request[v1.ListProjectsForOrganizationRequest]) (*connect_go.Response[v1.ListProjectsForOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.ListProjectsForOrganization is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetProject(context.Context, *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.GetProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.GetProject is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchProjectNames(context.Context, *connect_go.Request[v1.SearchProjectNamesRequest]) (*connect_go.Response[v1.SearchProjectNamesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.SearchProjectNames is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetProjectVariables(context.Context, *connect_go.Request[v1.GetProjectVariablesRequest]) (*connect_go.Response[v1.GetProjectVariablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.GetProjectVariables is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateProject(context.Context, *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.CreateProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.CreateProject is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteProject(context.Context, *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.DeleteProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.DeleteProject is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateProject(context.Context, *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.UpdateProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.UpdateProject is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateProjectVariables(context.Context, *connect_go.Request[v1.UpdateProjectVariablesRequest]) (*connect_go.Response[v1.UpdateProjectVariablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.UpdateProjectVariables is not implemented"))
}

func (UnimplementedAdminServiceHandler) TriggerReconcile(context.Context, *connect_go.Request[v1.TriggerReconcileRequest]) (*connect_go.Response[v1.TriggerReconcileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.TriggerReconcile is not implemented"))
}

func (UnimplementedAdminServiceHandler) TriggerRefreshSources(context.Context, *connect_go.Request[v1.TriggerRefreshSourcesRequest]) (*connect_go.Response[v1.TriggerRefreshSourcesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.TriggerRefreshSources is not implemented"))
}

func (UnimplementedAdminServiceHandler) TriggerRedeploy(context.Context, *connect_go.Request[v1.TriggerRedeployRequest]) (*connect_go.Response[v1.TriggerRedeployResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.TriggerRedeploy is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListOrganizationMembers(context.Context, *connect_go.Request[v1.ListOrganizationMembersRequest]) (*connect_go.Response[v1.ListOrganizationMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.ListOrganizationMembers is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListOrganizationInvites(context.Context, *connect_go.Request[v1.ListOrganizationInvitesRequest]) (*connect_go.Response[v1.ListOrganizationInvitesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.ListOrganizationInvites is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddOrganizationMember(context.Context, *connect_go.Request[v1.AddOrganizationMemberRequest]) (*connect_go.Response[v1.AddOrganizationMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.AddOrganizationMember is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveOrganizationMember(context.Context, *connect_go.Request[v1.RemoveOrganizationMemberRequest]) (*connect_go.Response[v1.RemoveOrganizationMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.RemoveOrganizationMember is not implemented"))
}

func (UnimplementedAdminServiceHandler) LeaveOrganization(context.Context, *connect_go.Request[v1.LeaveOrganizationRequest]) (*connect_go.Response[v1.LeaveOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.LeaveOrganization is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetOrganizationMemberRole(context.Context, *connect_go.Request[v1.SetOrganizationMemberRoleRequest]) (*connect_go.Response[v1.SetOrganizationMemberRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.SetOrganizationMemberRole is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListProjectMembers(context.Context, *connect_go.Request[v1.ListProjectMembersRequest]) (*connect_go.Response[v1.ListProjectMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.ListProjectMembers is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListProjectInvites(context.Context, *connect_go.Request[v1.ListProjectInvitesRequest]) (*connect_go.Response[v1.ListProjectInvitesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.ListProjectInvites is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddProjectMember(context.Context, *connect_go.Request[v1.AddProjectMemberRequest]) (*connect_go.Response[v1.AddProjectMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.AddProjectMember is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveProjectMember(context.Context, *connect_go.Request[v1.RemoveProjectMemberRequest]) (*connect_go.Response[v1.RemoveProjectMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.RemoveProjectMember is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetProjectMemberRole(context.Context, *connect_go.Request[v1.SetProjectMemberRoleRequest]) (*connect_go.Response[v1.SetProjectMemberRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.SetProjectMemberRole is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCurrentUser(context.Context, *connect_go.Request[v1.GetCurrentUserRequest]) (*connect_go.Response[v1.GetCurrentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.GetCurrentUser is not implemented"))
}

func (UnimplementedAdminServiceHandler) IssueRepresentativeAuthToken(context.Context, *connect_go.Request[v1.IssueRepresentativeAuthTokenRequest]) (*connect_go.Response[v1.IssueRepresentativeAuthTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.IssueRepresentativeAuthToken is not implemented"))
}

func (UnimplementedAdminServiceHandler) RevokeCurrentAuthToken(context.Context, *connect_go.Request[v1.RevokeCurrentAuthTokenRequest]) (*connect_go.Response[v1.RevokeCurrentAuthTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.RevokeCurrentAuthToken is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetGithubRepoStatus(context.Context, *connect_go.Request[v1.GetGithubRepoStatusRequest]) (*connect_go.Response[v1.GetGithubRepoStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.GetGithubRepoStatus is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetGitCredentials(context.Context, *connect_go.Request[v1.GetGitCredentialsRequest]) (*connect_go.Response[v1.GetGitCredentialsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.GetGitCredentials is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateWhitelistedDomain(context.Context, *connect_go.Request[v1.CreateWhitelistedDomainRequest]) (*connect_go.Response[v1.CreateWhitelistedDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.CreateWhitelistedDomain is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveWhitelistedDomain(context.Context, *connect_go.Request[v1.RemoveWhitelistedDomainRequest]) (*connect_go.Response[v1.RemoveWhitelistedDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.RemoveWhitelistedDomain is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListWhitelistedDomains(context.Context, *connect_go.Request[v1.ListWhitelistedDomainsRequest]) (*connect_go.Response[v1.ListWhitelistedDomainsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.ListWhitelistedDomains is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.GetUser is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchUsers(context.Context, *connect_go.Request[v1.SearchUsersRequest]) (*connect_go.Response[v1.SearchUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.SearchUsers is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListSuperusers(context.Context, *connect_go.Request[v1.ListSuperusersRequest]) (*connect_go.Response[v1.ListSuperusersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.ListSuperusers is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetSuperuser(context.Context, *connect_go.Request[v1.SetSuperuserRequest]) (*connect_go.Response[v1.SetSuperuserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.SetSuperuser is not implemented"))
}

func (UnimplementedAdminServiceHandler) SudoGetResource(context.Context, *connect_go.Request[v1.SudoGetResourceRequest]) (*connect_go.Response[v1.SudoGetResourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.SudoGetResource is not implemented"))
}

func (UnimplementedAdminServiceHandler) SudoUpdateUserQuotas(context.Context, *connect_go.Request[v1.SudoUpdateUserQuotasRequest]) (*connect_go.Response[v1.SudoUpdateUserQuotasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.SudoUpdateUserQuotas is not implemented"))
}

func (UnimplementedAdminServiceHandler) SudoUpdateOrganizationQuotas(context.Context, *connect_go.Request[v1.SudoUpdateOrganizationQuotasRequest]) (*connect_go.Response[v1.SudoUpdateOrganizationQuotasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.SudoUpdateOrganizationQuotas is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateUserPreferences(context.Context, *connect_go.Request[v1.UpdateUserPreferencesRequest]) (*connect_go.Response[v1.UpdateUserPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.UpdateUserPreferences is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListBookmarks(context.Context, *connect_go.Request[v1.ListBookmarksRequest]) (*connect_go.Response[v1.ListBookmarksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.ListBookmarks is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetBookmark(context.Context, *connect_go.Request[v1.GetBookmarkRequest]) (*connect_go.Response[v1.GetBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.GetBookmark is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateBookmark(context.Context, *connect_go.Request[v1.CreateBookmarkRequest]) (*connect_go.Response[v1.CreateBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.CreateBookmark is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveBookmark(context.Context, *connect_go.Request[v1.RemoveBookmarkRequest]) (*connect_go.Response[v1.RemoveBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rill.admin.v1.AdminService.RemoveBookmark is not implemented"))
}
