syntax = "proto3";
package rill.runtime.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "rill/runtime/v1/schema.proto";
import "rill/runtime/v1/time_grain.proto";

message Resource {
  ResourceMeta meta = 1;
  oneof resource {
    // Well-known types only, for now. If required, we can add support for a google.protobuf.Any later.
    ProjectParser project_parser = 2;
    TableV2 table = 3;
    SourceV2 source = 4;
    ModelV2 model = 5;
    MetricsViewV2 metrics_view = 6;
    PullTrigger pull_trigger = 7;
    RefreshTrigger refresh_trigger = 8;
    BucketPlanner bucket_planner = 9;
  }
}

message ResourceMeta {
  ResourceName name = 1;
  repeated ResourceName refs = 2;
  map<string, string> annotations = 3;
  int64 spec_version = 5;
  int64 state_version = 6;
  bool deleted = 7;
  string reconcile_error = 8;
  google.protobuf.Timestamp created_on = 9;
  google.protobuf.Timestamp spec_updated_on = 10;
  google.protobuf.Timestamp state_updated_on = 11;
  optional google.protobuf.Timestamp deleted_on = 12;
}

message ResourceName {
  string kind = 1;
  string name = 2;
}

message ProjectParser {
  ProjectParserSpec spec = 1;
  ProjectParserState state = 2;
}

message ProjectParserSpec {
  // compiler identifies the project file parser to use.
  string compiler = 1;
  // watch makes the project parser watch for file changes and automatically trigger reconciles. (requires repo driver to support watching.)
  bool watch = 2;
  // refresh_on_pull TODO
  bool refresh_on_pull = 3;
  // atomic makes the project parser attempt to stage all changes before committing them.
  bool atomic = 4;
  // materialize_model_default sets a default for whether or not to materialize a model, if not explicitly set in the model.
  bool materialize_model_default = 5;
  // materialize_model_delay_seconds TODO
  uint32 materialize_model_delay_seconds = 6;
  // retain_deleted_model_seconds TODO
  uint32 retain_deleted_model_seconds = 7;
  // bool simulate_streaming_ingestion = 8;
  // bool sync_existing_tables = 9;
}

message ProjectParserState {
  repeated ParseError parse_errors = 1;
  string current_commit_sha = 2;
  repeated string changed_paths = 3;
}

message TableV2 {
  TableSpec spec = 1;
  TableState state = 2;
}

message TableSpec {
  string connector = 1;
  string schema = 2;
  string name = 3;
}

message TableState {
  StructType schema = 1;
}

message SourceV2 {
  SourceSpec spec = 1;
  SourceState state = 2;
}

message SourceSpec {
  string source_connector = 1;
  string sink_connector = 2;
  google.protobuf.Struct properties = 3;
  Schedule refresh_schedule = 5;
  uint32 timeout_seconds = 6;
}

message SourceState {
  string table_name = 1;
  string stage_table_name = 2;
  ValidationError validation_error = 3;
  ExecutionError execution_error = 4;
}

message ModelV2 {
  ModelSpec spec = 1;
  ModelState state = 2;
}

message ModelSpec {
  string connector = 1;
  string sql = 2;
  bool derive_metrics_view = 3;
  Schedule refresh_schedule = 4;
  uint32 timeout_seconds = 6;
  optional bool materialize = 7;
}

message ModelState {
  string table_name = 1;
  string stage_table_name = 2;
  ValidationError validation_error = 3;
  ExecutionError execution_error = 4;
  DependencyError dependency_error = 5;
}

message MetricsViewV2 {
  MetricsViewSpec spec = 1;
  MetricsViewState state = 2;
}

message MetricsViewSpec {
  // Dimensions are columns to filter and group by
  message Dimension {
    string name = 1;
    string column = 2;
    string label = 3;
    string description = 4;
  }
  // Measures are aggregated computed values
  message Measure {
    string name = 1;
    string expression = 2;
    string label = 3;
    string description = 4;
    string format = 5;
    bool valid_percent_of_total = 6;
  }
  // User friendly label for the dashboard
  string title = 1;
  // Brief description of the dashboard
  string description = 2;
  // Name of the source or model that the metrics view is based on
  string model = 3;
  // Name of the primary time dimension, used for rendering time series
  string time_dimension = 4;
  // Dimensions in the metrics view
  repeated Dimension dimensions = 5;
  // Measures in the metrics view
  repeated Measure measures = 6;
  // Smallest time grain to show in the dashboard
  TimeGrain smallest_time_grain = 7;
  // Default time range for the dashboard. It should be a valid ISO 8601 duration string.
  string default_time_range = 8;
}

message MetricsViewState {
  ValidationError validation_error = 1;
  DependencyError dependency_error = 2;
}

message Migration {
  MigrationSpec spec = 1;
  MigrationState state = 2;
}

message MigrationSpec {
  string connector = 1;
  string sql = 2;
  uint32 version = 3;
}

message MigrationState {
  uint32 version = 1;
}

message PullTrigger {
  PullTriggerSpec spec = 1;
  PullTriggerState state = 2;
}

message PullTriggerSpec {
  repeated string only_paths = 1;
  bool refresh_sources = 2;
}

message PullTriggerState {}

message RefreshTrigger {
  RefreshTriggerSpec spec = 1;
  RefreshTriggerState state = 2;
}

message RefreshTriggerSpec {
  string only_names = 1;
  bool reset = 2; // Reingest, don't do incremental
}

message RefreshTriggerState {}


message BucketPlanner {
  BucketPlannerSpec spec = 1;
  BucketPlannerState state = 2;
}

message BucketPlannerSpec {
  BucketExtractPolicy extract_policy = 1;
}

message BucketPlannerState {
  string region = 1;
}

message BucketExtractPolicy {
  enum Strategy {
    STRATEGY_UNSPECIFIED = 0;
    STRATEGY_HEAD = 1;
    STRATEGY_TAIL = 2;
  }
  // strategy for selecting rows in a file
  Strategy rows_strategy = 1;
  // could in future add: uint64 rows_limit = n;
  // limit on data fetched in bytes
  uint64 rows_limit_bytes = 2;
  // strategy for selecting files
  Strategy files_strategy = 3;
  // limit on number of files
  uint64 files_limit = 4;
}

message Schedule {
  string cron = 1;
  uint32 ticker_seconds = 2;
  // uint32 throttle_seconds = 3;
}

message ParseError {
  string message = 1;
  string file_path = 2;
  CharLocation start_loc = 3;
  CharLocation end_loc = 4;
}

message ValidationError {
  string message = 1;
  repeated string property_path = 2;
  CharLocation start_loc = 3;
  CharLocation end_loc = 4;
}

message DependencyError {
  string message = 1;
  string dependency = 2;
}

message ExecutionError {
  string message = 1;
  CharLocation start_loc = 3;
  CharLocation end_loc = 4;
}

// CharLocation is a line and column in a code file
message CharLocation {
  uint32 line = 1;
  uint32 column = 2;
}
